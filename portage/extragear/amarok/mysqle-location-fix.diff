diff -Nru -x '*~' amarok-2.7.0.orig/src/core-impl/collections/db/sql/mysqlecollection/MySqlEmbeddedStorage.cpp amarok-2.7.0/src/core-impl/collections/db/sql/mysqlecollection/MySqlEmbeddedStorage.cpp
--- amarok-2.7.0.orig/src/core-impl/collections/db/sql/mysqlecollection/MySqlEmbeddedStorage.cpp	2013-01-17 13:53:55.000000000 +0100
+++ amarok-2.7.0/src/core-impl/collections/db/sql/mysqlecollection/MySqlEmbeddedStorage.cpp	2013-04-28 14:33:45.713737800 +0200
@@ -40,39 +40,33 @@
     if( storageLocation.isEmpty() )
     {
         storagePath = Amarok::saveLocation();
-        defaultsFile = Amarok::config( "MySQLe" ).readEntry( "config", QString(storagePath + "my.cnf") );
         databaseDir = Amarok::config( "MySQLe" ).readEntry( "data", QString(storagePath + "mysqle") );
     }
     else
     {
         QDir dir( storageLocation );
         dir.mkpath( "." );  //ensure directory exists
-        defaultsFile = QDir::cleanPath( dir.absoluteFilePath( "my.cnf" ) );
         databaseDir = dir.absolutePath() + QDir::separator() + "mysqle";
     }
 
-    if( !Amarok::config( "MySQLe" ).readEntry( "keepUserMyCnf", false ) )
+    // CAUTION: if we ever change the table type we will need to fix a number of MYISAM specific
+    // functions, such as FULLTEXT indexing.
+    QList<QByteArray> mysql_args;
+    mysql_args << "amarok"
+               << QString( "--datadir=%1" ).arg( databaseDir ).toLocal8Bit()
+               << "--default-storage-engine=MyISAM"
+               << "--innodb=OFF"
+               << "--skip-grant-tables"
+               << "--myisam-recover-options=FORCE"
+               << "--key-buffer-size=16777216" // (16Mb)
+               << "--character-set-server=utf8"
+               << "--collation-server=utf8_bin";
+
+    Q_ASSERT( mysql_args.length() == 9 );//for msvc we need to use a fixed size for the array
+    char *mysql_argv[9];
+    for( int i=0 ; i<mysql_args.length() ; ++i)
     {
-        QFile df( defaultsFile );
-        if ( !df.open( QIODevice::WriteOnly | QIODevice::Truncate ) ) {
-            error() << "Unable to open " << defaultsFile << " for writing.";
-            reportError( "init" );
-        }
-        QTextStream out( &df );
-        out << "[embedded]" << endl;
-        out << "datadir = " << databaseDir.toAscii().data() << endl;
-        // CAUTION: if we ever change the table type we will need to fix a number of MYISAM specific
-        // functions, such as FULLTEXT indexing.
-        out << "default-storage-engine = MyISAM" << endl;
-        out << "loose-innodb = 0" << endl;
-        out << "skip-grant-tables = 1" << endl;
-        out << "myisam-recover = FORCE" << endl;
-        out << "key_buffer_size = 16777216" << endl; // (16Mb)
-        out << "character-set-server = utf8" << endl;
-        out << "collation-server = utf8_bin" << endl;
-        //If the file is world-writable MySQL won't even read it
-        df.setPermissions( QFile::ReadOwner | QFile::WriteOwner | QFile::ReadGroup | QFile::ReadOther );
-        df.close();
+        mysql_argv[i] = mysql_args[i].data();
     }
 
     if( !QFile::exists( databaseDir ) )
@@ -80,11 +74,10 @@
         QDir dir( databaseDir );
         dir.mkpath( "." );
     }
+    
 
-    setenv( "MYSQL_HOME", storagePath.toAscii().data(), 1 );
-    setenv( "DEFAULT_HOME_ENV", storagePath.toAscii().data(), 1 );
-    char *args[] = { (char*) "amarok" };
-    if( mysql_library_init( 1 , args, 0 ) != 0 )
+
+    if( mysql_library_init( mysql_args.length() , mysql_argv, 0 ) != 0 )
     {
         error() << "MySQL library initialization failed.";
         reportError( "init" );

