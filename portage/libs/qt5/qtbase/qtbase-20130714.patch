diff --git a/mkspecs/win32-g++/qmake.conf b/mkspecs/win32-g++/qmake.conf
index c6ff808..3bb1920 100644
--- a/mkspecs/win32-g++/qmake.conf
+++ b/mkspecs/win32-g++/qmake.conf
@@ -30,6 +30,7 @@ QMAKE_CFLAGS_DEPS       = -M
 QMAKE_CFLAGS_WARN_ON    = -Wall -Wextra
 QMAKE_CFLAGS_WARN_OFF   = -w
 QMAKE_CFLAGS_RELEASE    = -O2
+QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO = -O2 -g
 QMAKE_CFLAGS_DEBUG      = -g
 QMAKE_CFLAGS_YACC       = -Wno-unused -Wno-parentheses
 QMAKE_CFLAGS_SPLIT_SECTIONS = -ffunction-sections
diff --git a/qmake/generators/makefile.cpp b/qmake/generators/makefile.cpp
index f2decd7..d8ec64f 100644
--- a/qmake/generators/makefile.cpp
+++ b/qmake/generators/makefile.cpp
@@ -1172,7 +1172,7 @@ MakefileGenerator::filePrefixRoot(const QString &root, const QString &path)
 {
     QString ret(path);
     if(path.length() > 2 && path[1] == ':') //c:\foo
-        ret.insert(2, root);
+        ret.replace(0, 2, root);
     else
         ret.prepend(root);
     while (ret.endsWith('\\'))
diff --git a/src/corelib/io/qstandardpaths_win.cpp b/src/corelib/io/qstandardpaths_win.cpp
index b1d5821..1682e2c 100644
--- a/src/corelib/io/qstandardpaths_win.cpp
+++ b/src/corelib/io/qstandardpaths_win.cpp
@@ -216,6 +216,16 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
                     dirs.append(QCoreApplication::applicationDirPath());
                     dirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/data"));
                 }
+                dirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/../share"));
+                if (type != GenericDataLocation && type != GenericConfigLocation) {
+                    QString appData = QCoreApplication::applicationDirPath() + QLatin1String("/../share");
+                    if (!QCoreApplication::organizationName().isEmpty())
+                        appData += QLatin1Char('/') + QCoreApplication::organizationName();
+                    if (!QCoreApplication::applicationName().isEmpty())
+                        appData += QLatin1Char('/') + QCoreApplication::applicationName();
+					dirs.append(appData);
+				}
+                dirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/../etc/xdg"));
 #endif
             }
             break;
diff --git a/src/gui/image/qiconloader.cpp b/src/gui/image/qiconloader.cpp
index fa14c84..d853dcc 100644
--- a/src/gui/image/qiconloader.cpp
+++ b/src/gui/image/qiconloader.cpp
@@ -157,6 +157,7 @@ QStringList QIconLoader::themeSearchPaths() const
 {
     if (m_iconDirs.isEmpty()) {
         m_iconDirs = systemIconSearchPaths();
+        m_iconDirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/../share/icons"));
         // Always add resource directory as search path
         m_iconDirs.append(QLatin1String(":/icons"));
     }
diff --git a/src/plugins/platforms/windows/qwindowstheme.cpp b/src/plugins/platforms/windows/qwindowstheme.cpp
index d3f67e9..e4f277f 100644
--- a/src/plugins/platforms/windows/qwindowstheme.cpp
+++ b/src/plugins/platforms/windows/qwindowstheme.cpp
@@ -332,6 +332,8 @@ static inline QStringList iconThemeSearchPaths()
 static inline QStringList styleNames()
 {
     QStringList result;
+    result.append(QStringLiteral("breeze"));
+    result.append(QStringLiteral("oxygen"));
     if (QSysInfo::WindowsVersion >= QSysInfo::WV_VISTA)
         result.append(QStringLiteral("WindowsVista"));
     if (QSysInfo::WindowsVersion >= QSysInfo::WV_XP)
@@ -393,6 +395,8 @@ QVariant QWindowsTheme::themeHint(ThemeHint hint) const
         return QVariant(booleanSystemParametersInfo(SPI_GETSNAPTODEFBUTTON, false));
     case ContextMenuOnMouseRelease:
         return QVariant(true);
+     case QPlatformTheme::SystemIconThemeName:
+         return QVariant(QLatin1String("breeze"));
     default:
         break;
     }
diff --git a/tools/configure/configureapp.cpp b/tools/configure/configureapp.cpp
index 0490952..76ffc68 100644
--- a/tools/configure/configureapp.cpp
+++ b/tools/configure/configureapp.cpp
@@ -2987,7 +2987,7 @@ void Configure::generateOutputVars()
     if (dictionary[ "DBUS" ] != "no") {
        if (!dbusPath.isEmpty()) {
            qmakeVars += QString("QT_CFLAGS_DBUS = -I%1/include").arg(dbusPath);
-           qmakeVars += QString("QT_LIBS_DBUS = -L%1/lib").arg(dbusPath);
+           qmakeVars += QString("QT_LIBS_DBUS = -L%1/lib -ldbus-1").arg(dbusPath);
            if (dbusHostPath.isEmpty())
                qmakeVars += QString("QT_HOST_CFLAGS_DBUS = -I%1/include").arg(dbusPath);
        }
@@ -2996,7 +2996,7 @@ void Configure::generateOutputVars()
     }
     if (dictionary[ "SQL_MYSQL" ] != "no" && !mysqlPath.isEmpty()) {
         qmakeVars += QString("QT_CFLAGS_MYSQL = -I%1/include").arg(mysqlPath);
-        qmakeVars += QString("QT_LFLAGS_MYSQL = -L%1/lib").arg(mysqlPath);
+        qmakeVars += QString("QT_LFLAGS_MYSQL = -L%1/lib -llibmysql").arg(mysqlPath);
     }
     if (!psqlLibs.isEmpty())
         qmakeVars += QString("QT_LFLAGS_PSQL=") + psqlLibs.section("=", 1);
