diff --git a/qmake/generators/makefile.cpp b/qmake/generators/makefile.cpp
index 4dfe69f..d3b368f 100644
--- a/qmake/generators/makefile.cpp
+++ b/qmake/generators/makefile.cpp
@@ -1183,7 +1183,7 @@ MakefileGenerator::filePrefixRoot(const QString &root, const QString &path)
 {
     QString ret(path);
     if(path.length() > 2 && path[1] == ':') //c:\foo
-        ret.insert(2, root);
+        ret.replace(0, 2, root);
     else
         ret.prepend(root);
     while (ret.endsWith('\\'))
diff --git a/src/corelib/io/qstandardpaths_win.cpp b/src/corelib/io/qstandardpaths_win.cpp
index 73d49cb..50f8e6a 100644
--- a/src/corelib/io/qstandardpaths_win.cpp
+++ b/src/corelib/io/qstandardpaths_win.cpp
@@ -249,6 +249,16 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
 #  ifndef QT_BOOTSTRAPPED
         dirs.append(QCoreApplication::applicationDirPath());
         dirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/data"));
+        dirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/../share"));
+        if (type != GenericDataLocation && type != GenericConfigLocation) {
+            QString appData = QCoreApplication::applicationDirPath() + QLatin1String("/../share");
+            if (!QCoreApplication::organizationName().isEmpty())
+                appData += QLatin1Char('/') + QCoreApplication::organizationName();
+            if (!QCoreApplication::applicationName().isEmpty())
+                appData += QLatin1Char('/') + QCoreApplication::applicationName();
+           dirs.append(appData);
+       }
+        dirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/../etc/xdg"));
 #  endif // !QT_BOOTSTRAPPED
     } // isConfigLocation()
 #endif // !Q_OS_WINCE
diff --git a/src/gui/image/qiconloader.cpp b/src/gui/image/qiconloader.cpp
index 3ead72d..7d39e3d 100644
--- a/src/gui/image/qiconloader.cpp
+++ b/src/gui/image/qiconloader.cpp
@@ -149,6 +149,7 @@ QStringList QIconLoader::themeSearchPaths() const
 {
     if (m_iconDirs.isEmpty()) {
         m_iconDirs = systemIconSearchPaths();
+        m_iconDirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/../share/icons"));
         // Always add resource directory as search path
         m_iconDirs.append(QLatin1String(":/icons"));
     }
diff --git a/src/plugins/platforms/windows/qwindowstheme.cpp b/src/plugins/platforms/windows/qwindowstheme.cpp
index cc367ff..c9fdab2 100644
--- a/src/plugins/platforms/windows/qwindowstheme.cpp
+++ b/src/plugins/platforms/windows/qwindowstheme.cpp
@@ -332,6 +332,8 @@ static inline QStringList iconThemeSearchPaths()
 static inline QStringList styleNames()
 {
     QStringList result;
+    result.append(QStringLiteral("breeze"));
+    result.append(QStringLiteral("oxygen"));
     if (QSysInfo::WindowsVersion >= QSysInfo::WV_VISTA)
         result.append(QStringLiteral("WindowsVista"));
     if (QSysInfo::WindowsVersion >= QSysInfo::WV_XP)
@@ -395,6 +397,9 @@ QVariant QWindowsTheme::themeHint(ThemeHint hint) const
         return QVariant(true);
     case WheelScrollLines:
         return QVariant(int(dWordSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 3)));
+    case QPlatformTheme::SystemIconThemeName:
+    case QPlatformTheme::SystemIconFallbackThemeName:
+        return QVariant(QLatin1String("breeze"));
     default:
         break;
     }
diff --git a/tools/configure/configureapp.cpp b/tools/configure/configureapp.cpp
index 555ccbf..45a9e7a 100644
--- a/tools/configure/configureapp.cpp
+++ b/tools/configure/configureapp.cpp
@@ -3090,7 +3090,7 @@ void Configure::generateOutputVars()
     if (dictionary[ "DBUS" ] == "linked") {
        if (!dbusPath.isEmpty()) {
            qmakeVars += QString("QT_CFLAGS_DBUS = -I%1/include").arg(dbusPath);
-           qmakeVars += QString("QT_LIBS_DBUS = -L%1/lib").arg(dbusPath);
+           qmakeVars += QString("QT_LIBS_DBUS = -L%1/lib -ldbus-1").arg(dbusPath);
            if (dbusHostPath.isEmpty())
                qmakeVars += QString("QT_HOST_CFLAGS_DBUS = -I%1/include").arg(dbusPath);
        }
@@ -3099,7 +3099,7 @@ void Configure::generateOutputVars()
     }
     if (dictionary[ "SQL_MYSQL" ] != "no" && !mysqlPath.isEmpty()) {
         qmakeVars += QString("QT_CFLAGS_MYSQL = -I%1/include").arg(mysqlPath);
-        qmakeVars += QString("QT_LFLAGS_MYSQL = -L%1/lib").arg(mysqlPath);
+        qmakeVars += QString("QT_LFLAGS_MYSQL = -L%1/lib -llibmysql").arg(mysqlPath);
     }
     if (!psqlLibs.isEmpty())
         qmakeVars += QString("QT_LFLAGS_PSQL=") + psqlLibs.section("=", 1);
