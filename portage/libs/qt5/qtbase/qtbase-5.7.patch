diff --git a/mkspecs/features/qt_build_extra.prf b/mkspecs/features/qt_build_extra.prf
index 378f5bb..4e53f8c 100644
--- a/mkspecs/features/qt_build_extra.prf
+++ b/mkspecs/features/qt_build_extra.prf
@@ -13,7 +13,7 @@ equals(TEMPLATE, subdirs): return()
 
 # It's likely that these extra flags will be wrong for host builds,
 # and the bootstrapped tools usually don't need them anyway.
-host_build:force_bootstrap: return()
+# host_build:force_bootstrap: return()
 
 # The headersclean check needs defines and includes even for
 # header-only modules.
diff --git a/qmake/generators/makefile.cpp b/qmake/generators/makefile.cpp
index 12004c6..9886d10 100644
--- a/qmake/generators/makefile.cpp
+++ b/qmake/generators/makefile.cpp
@@ -1182,7 +1182,7 @@ MakefileGenerator::filePrefixRoot(const QString &root, const QString &path)
 {
     QString ret(path);
     if(path.length() > 2 && path[1] == ':') //c:\foo
-        ret.insert(2, root);
+        ret.replace(0, 2, root);
     else
         ret.prepend(root);
     while (ret.endsWith('\\'))
diff --git a/src/corelib/io/qstandardpaths_win.cpp b/src/corelib/io/qstandardpaths_win.cpp
index 9bd5a9e..13025c1 100644
--- a/src/corelib/io/qstandardpaths_win.cpp
+++ b/src/corelib/io/qstandardpaths_win.cpp
@@ -277,6 +277,16 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
 #  ifndef QT_BOOTSTRAPPED
         dirs.append(QCoreApplication::applicationDirPath());
         dirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/data"));
+        dirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/../share"));
+        if (type != GenericDataLocation && type != GenericConfigLocation) {
+            QString appData = QCoreApplication::applicationDirPath() + QLatin1String("/../share");
+            if (!QCoreApplication::organizationName().isEmpty())
+                appData += QLatin1Char('/') + QCoreApplication::organizationName();
+            if (!QCoreApplication::applicationName().isEmpty())
+                appData += QLatin1Char('/') + QCoreApplication::applicationName();
+           dirs.append(appData);
+       }
+        dirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/../etc/xdg"));
 #  endif // !QT_BOOTSTRAPPED
     } // isConfigLocation()
 #endif // !Q_OS_WINCE
diff --git a/src/gui/image/qiconloader.cpp b/src/gui/image/qiconloader.cpp
index 2f24165..972c26b 100644
--- a/src/gui/image/qiconloader.cpp
+++ b/src/gui/image/qiconloader.cpp
@@ -151,6 +151,7 @@ QStringList QIconLoader::themeSearchPaths() const
 {
     if (m_iconDirs.isEmpty()) {
         m_iconDirs = systemIconSearchPaths();
+        m_iconDirs.append(QCoreApplication::applicationDirPath() + QLatin1String("/../share/icons"));
         // Always add resource directory as search path
         m_iconDirs.append(QLatin1String(":/icons"));
     }
diff --git a/src/plugins/platforms/windows/qwindowstheme.cpp b/src/plugins/platforms/windows/qwindowstheme.cpp
index 4bf424f..352cd8f 100644
--- a/src/plugins/platforms/windows/qwindowstheme.cpp
+++ b/src/plugins/platforms/windows/qwindowstheme.cpp
@@ -353,6 +353,8 @@ static inline QStringList iconThemeSearchPaths()
 static inline QStringList styleNames()
 {
     QStringList result;
+    result.append(QStringLiteral("breeze"));
+    result.append(QStringLiteral("oxygen"));
     if (QSysInfo::WindowsVersion >= QSysInfo::WV_VISTA)
         result.append(QStringLiteral("WindowsVista"));
     if (QSysInfo::WindowsVersion >= QSysInfo::WV_XP)
@@ -416,6 +418,9 @@ QVariant QWindowsTheme::themeHint(ThemeHint hint) const
         return QVariant(true);
     case WheelScrollLines:
         return QVariant(int(dWordSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 3)));
+    case QPlatformTheme::SystemIconThemeName:
+    case QPlatformTheme::SystemIconFallbackThemeName:
+        return QVariant(QLatin1String("breeze"));
     default:
         break;
     }
