diff -Nru -x '*~' mysql-5.5.25a.orig/client/mysqlslap.c mysql-5.5.25a/client/mysqlslap.c
--- mysql-5.5.25a.orig/client/mysqlslap.c	2012-07-02 13:35:22.000000000 +0200
+++ mysql-5.5.25a/client/mysqlslap.c	2012-08-05 01:53:10.137433600 +0200
@@ -280,7 +280,7 @@
     return s + us;
 }
 
-#ifdef __WIN__
+#ifdef _MSC_VER
 static int gettimeofday(struct timeval *tp, void *tzp)
 {
   unsigned int ticks;
diff -Nru -x '*~' mysql-5.5.25a.orig/cmake/FindLibraryWithDebug.cmake mysql-5.5.25a/cmake/FindLibraryWithDebug.cmake
--- mysql-5.5.25a.orig/cmake/FindLibraryWithDebug.cmake	1970-01-01 01:00:00.000000000 +0100
+++ mysql-5.5.25a/cmake/FindLibraryWithDebug.cmake	2012-08-05 01:53:10.146434100 +0200
@@ -0,0 +1,113 @@
+#
+#  FIND_LIBRARY_WITH_DEBUG
+#  -> enhanced FIND_LIBRARY to allow the search for an
+#     optional debug library with a WIN32_DEBUG_POSTFIX similar
+#     to CMAKE_DEBUG_POSTFIX when creating a shared lib
+#     it has to be the second and third argument
+
+# Copyright (c) 2007, Christian Ehrlicher, <ch.ehrlicher@gmx.de>
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+MACRO(FIND_LIBRARY_WITH_DEBUG var_name win32_dbg_postfix_name dgb_postfix libname)
+
+  IF(NOT "${win32_dbg_postfix_name}" STREQUAL "WIN32_DEBUG_POSTFIX")
+
+     # no WIN32_DEBUG_POSTFIX -> simply pass all arguments to FIND_LIBRARY
+     FIND_LIBRARY(${var_name}
+                  ${win32_dbg_postfix_name}
+                  ${dgb_postfix}
+                  ${libname}
+                  ${ARGN}
+     )
+
+  ELSE(NOT "${win32_dbg_postfix_name}" STREQUAL "WIN32_DEBUG_POSTFIX")
+
+    IF(NOT WIN32)
+      # on non-win32 we don't need to take care about WIN32_DEBUG_POSTFIX
+
+      FIND_LIBRARY(${var_name} ${libname} ${ARGN})
+
+    ELSE(NOT WIN32)
+
+      # 1. get all possible libnames
+      SET(args ${ARGN})
+      SET(newargs "")
+      SET(libnames_release "")
+      SET(libnames_debug "")
+
+      LIST(LENGTH args listCount)
+
+      IF("${libname}" STREQUAL "NAMES")
+        SET(append_rest 0)
+        LIST(APPEND args " ")
+
+        FOREACH(i RANGE ${listCount})
+          LIST(GET args ${i} val)
+
+          IF(append_rest)
+            LIST(APPEND newargs ${val})
+          ELSE(append_rest)
+            IF("${val}" STREQUAL "PATHS")
+              LIST(APPEND newargs ${val})
+              SET(append_rest 1)
+            ELSE("${val}" STREQUAL "PATHS")
+              LIST(APPEND libnames_release "${val}")
+              LIST(APPEND libnames_debug   "${val}${dgb_postfix}")
+            ENDIF("${val}" STREQUAL "PATHS")
+          ENDIF(append_rest)
+
+        ENDFOREACH(i)
+
+      ELSE("${libname}" STREQUAL "NAMES")
+
+        # just one name
+        LIST(APPEND libnames_release "${libname}")
+        LIST(APPEND libnames_debug   "${libname}${dgb_postfix}")
+
+        SET(newargs ${args})
+
+      ENDIF("${libname}" STREQUAL "NAMES")
+
+      # search the release lib
+      FIND_LIBRARY(${var_name}_RELEASE
+                   NAMES ${libnames_release}
+                   ${newargs}
+      )
+
+      # search the debug lib
+      FIND_LIBRARY(${var_name}_DEBUG
+                   NAMES ${libnames_debug}
+                   ${newargs}
+      )
+
+      IF(${var_name}_RELEASE AND ${var_name}_DEBUG)
+
+        # both libs found
+        SET(${var_name} optimized ${${var_name}_RELEASE}
+                        debug     ${${var_name}_DEBUG})
+
+      ELSE(${var_name}_RELEASE AND ${var_name}_DEBUG)
+
+        IF(${var_name}_RELEASE)
+
+          # only release found
+          SET(${var_name} ${${var_name}_RELEASE})
+
+        ELSE(${var_name}_RELEASE)
+
+          # only debug (or nothing) found
+          SET(${var_name} ${${var_name}_DEBUG})
+
+        ENDIF(${var_name}_RELEASE)
+       
+      ENDIF(${var_name}_RELEASE AND ${var_name}_DEBUG)
+
+      MARK_AS_ADVANCED(${var_name}_RELEASE)
+      MARK_AS_ADVANCED(${var_name}_DEBUG)
+
+    ENDIF(NOT WIN32)
+
+  ENDIF(NOT "${win32_dbg_postfix_name}" STREQUAL "WIN32_DEBUG_POSTFIX")
+
+ENDMACRO(FIND_LIBRARY_WITH_DEBUG)
diff -Nru -x '*~' mysql-5.5.25a.orig/cmake/FindOpenSSL.cmake mysql-5.5.25a/cmake/FindOpenSSL.cmake
--- mysql-5.5.25a.orig/cmake/FindOpenSSL.cmake	1970-01-01 01:00:00.000000000 +0100
+++ mysql-5.5.25a/cmake/FindOpenSSL.cmake	2012-08-05 01:53:10.151434400 +0200
@@ -0,0 +1,63 @@
+# - Try to find the OpenSSL encryption library
+# Once done this will define
+#
+#  OPENSSL_FOUND - system has the OpenSSL library
+#  OPENSSL_INCLUDE_DIR - the OpenSSL include directory
+#  OPENSSL_LIBRARIES - The libraries needed to use OpenSSL
+#  OPENSSL_EAY_LIBRARIES - The additional libraries needed to use OpenSSL on windows
+
+# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+INCLUDE(FindLibraryWithDebug)
+
+# on win32 we additional need to link to libeay32.lib
+MACRO(OPENSSL_ADD_LIB_EAY_LIBS)
+   FIND_LIBRARY_WITH_DEBUG(OPENSSL_EAY_LIBRARIES
+                   WIN32_DEBUG_POSTFIX d
+                   NAMES eay libeay libeay32 libeay32MD)
+ENDMACRO(OPENSSL_ADD_LIB_EAY_LIBS)
+
+IF(OPENSSL_LIBRARIES)
+   SET(OpenSSL_FIND_QUIETLY TRUE)
+ENDIF(OPENSSL_LIBRARIES)
+
+IF(SSL_EAY_DEBUG AND SSL_EAY_RELEASE)
+   SET(LIB_FOUND 1)
+ENDIF(SSL_EAY_DEBUG AND SSL_EAY_RELEASE)
+
+FIND_PATH(OPENSSL_INCLUDE_DIR openssl/ssl.h )
+
+FIND_LIBRARY_WITH_DEBUG(OPENSSL_LIBRARIES
+                WIN32_DEBUG_POSTFIX d
+                NAMES ssl ssleay ssleay32 libssleay32 ssleay32MD)
+
+IF(WIN32)
+   OPENSSL_ADD_LIB_EAY_LIBS()
+   IF(OPENSSL_INCLUDE_DIR AND OPENSSL_LIBRARIES AND OPENSSL_EAY_LIBRARIES)
+      SET(OPENSSL_FOUND TRUE)
+   ELSE(OPENSSL_INCLUDE_DIR AND OPENSSL_LIBRARIES AND OPENSSL_EAY_LIBRARIES)
+      SET(OPENSSL_FOUND FALSE)
+   ENDIF (OPENSSL_INCLUDE_DIR AND OPENSSL_LIBRARIES AND OPENSSL_EAY_LIBRARIES)
+ELSE(WIN32)
+   IF(OPENSSL_INCLUDE_DIR AND OPENSSL_LIBRARIES)
+      SET(OPENSSL_FOUND TRUE)
+   ELSE(OPENSSL_INCLUDE_DIR AND OPENSSL_LIBRARIES)
+      SET(OPENSSL_FOUND FALSE)
+   ENDIF (OPENSSL_INCLUDE_DIR AND OPENSSL_LIBRARIES)
+ENDIF(WIN32)
+
+IF (OPENSSL_FOUND)
+   IF (NOT OpenSSL_FIND_QUIETLY)
+      MESSAGE(STATUS "Found OpenSSL: ${OPENSSL_LIBRARIES}")
+   ENDIF (NOT OpenSSL_FIND_QUIETLY)
+ELSE (OPENSSL_FOUND)
+   IF (OpenSSL_FIND_REQUIRED)
+      MESSAGE(FATAL_ERROR "Could NOT find OpenSSL")
+   ENDIF (OpenSSL_FIND_REQUIRED)
+ENDIF (OPENSSL_FOUND)
+
+MARK_AS_ADVANCED(OPENSSL_INCLUDE_DIR OPENSSL_LIBRARIES)
+
diff -Nru -x '*~' mysql-5.5.25a.orig/cmake/libutils.cmake mysql-5.5.25a/cmake/libutils.cmake
--- mysql-5.5.25a.orig/cmake/libutils.cmake	2012-07-02 13:35:22.000000000 +0200
+++ mysql-5.5.25a/cmake/libutils.cmake	2012-08-05 01:53:10.155434700 +0200
@@ -65,7 +65,7 @@
 # that references all exports and this prevents linker from creating an 
 # empty library(there are unportable alternatives, --whole-archive)
 MACRO(CREATE_EXPORT_FILE VAR TARGET API_FUNCTIONS)
-  IF(WIN32)
+  IF(MSVC)
     SET(DUMMY ${CMAKE_CURRENT_BINARY_DIR}/${TARGET}_dummy.c)
     SET(EXPORTS ${CMAKE_CURRENT_BINARY_DIR}/${TARGET}_exports.def)
     CONFIGURE_FILE_CONTENT("" ${DUMMY})
@@ -197,7 +197,7 @@
         @ONLY
       )
       ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD
-        COMMAND rm ${TARGET_LOCATION}
+        COMMAND cmake remove -E ${TARGET_LOCATION}
         COMMAND ${CMAKE_COMMAND} -P 
         ${CMAKE_CURRENT_BINARY_DIR}/merge_archives_${TARGET}.cmake
       )
diff -Nru -x '*~' mysql-5.5.25a.orig/cmake/os/Windows.cmake mysql-5.5.25a/cmake/os/Windows.cmake
--- mysql-5.5.25a.orig/cmake/os/Windows.cmake	2012-07-02 13:35:22.000000000 +0200
+++ mysql-5.5.25a/cmake/os/Windows.cmake	2012-08-05 02:10:40.486510200 +0200
@@ -117,6 +117,12 @@
   ENDIF()
 ENDIF()
 
+IF(MINGW)
+    ADD_DEFINITIONS(-DMINGW_HAS_SECURE_API)
+    LINK_LIBRARIES(dbghelp)
+    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--enable-stdcall-fixup")
+ENDIF()
+
 # Always link with socket library
 LINK_LIBRARIES(ws2_32)
 # ..also for tests
diff -Nru -x '*~' mysql-5.5.25a.orig/cmake/ssl.cmake mysql-5.5.25a/cmake/ssl.cmake
--- mysql-5.5.25a.orig/cmake/ssl.cmake	2012-07-02 13:35:22.000000000 +0200
+++ mysql-5.5.25a/cmake/ssl.cmake	2012-08-05 01:53:10.169435500 +0200
@@ -66,14 +66,13 @@
     # Check for system library
     SET(OPENSSL_FIND_QUIETLY TRUE)
     INCLUDE(FindOpenSSL)
-    FIND_LIBRARY(CRYPTO_LIBRARY crypto)
-    MARK_AS_ADVANCED(CRYPTO_LIBRARY)
     INCLUDE(CheckSymbolExists)
+    SET(CMAKE_REQUIRED_INCLUDES ${OPENSSL_INCLUDE_DIR})
     CHECK_SYMBOL_EXISTS(SHA512_DIGEST_LENGTH "openssl/sha.h" 
                         HAVE_SHA512_DIGEST_LENGTH)
-    IF(OPENSSL_FOUND AND CRYPTO_LIBRARY AND HAVE_SHA512_DIGEST_LENGTH)
+    IF(OPENSSL_FOUND AND HAVE_SHA512_DIGEST_LENGTH)
       SET(SSL_SOURCES "")
-      SET(SSL_LIBRARIES ${OPENSSL_LIBRARIES} ${CRYPTO_LIBRARY})
+      SET(SSL_LIBRARIES ${OPENSSL_LIBRARIES} ${OPENSSL_EAY_LIBRARIES})
       SET(SSL_INCLUDE_DIRS ${OPENSSL_INCLUDE_DIR})
       SET(SSL_INTERNAL_INCLUDE_DIRS "")
       SET(SSL_DEFINES "-DHAVE_OPENSSL")
diff -Nru -x '*~' mysql-5.5.25a.orig/CMakeLists.txt mysql-5.5.25a/CMakeLists.txt
--- mysql-5.5.25a.orig/CMakeLists.txt	2012-07-02 13:35:22.000000000 +0200
+++ mysql-5.5.25a/CMakeLists.txt	2012-08-05 01:53:10.174435700 +0200
@@ -232,13 +232,13 @@
 
 
 # Set commonly used variables
-IF(WIN32)
-  SET(DEFAULT_MYSQL_HOME "C:/Program Files/MySQL/MySQL Server ${MYSQL_BASE_VERSION}" )
-  SET(SHAREDIR share)
-ELSE()
+# IF(WIN32)
+#   SET(DEFAULT_MYSQL_HOME "C:/Program Files/MySQL/MySQL Server ${MYSQL_BASE_VERSION}" )
+#   SET(SHAREDIR share)
+# ELSE()
   SET(DEFAULT_MYSQL_HOME ${CMAKE_INSTALL_PREFIX})
-  SET(SHAREDIR ${DEFAULT_MYSQL_HOME}/${INSTALL_MYSQLSHAREDIR})
-ENDIF()
+  SET(SHAREDIR share)
+# ENDIF()
 
 SET(DEFAULT_BASEDIR "${DEFAULT_MYSQL_HOME}")
 IF(INSTALL_MYSQLDATADIR MATCHES "^/.*")
diff -Nru -x '*~' mysql-5.5.25a.orig/CMakeLists.txt.orig mysql-5.5.25a/CMakeLists.txt.orig
--- mysql-5.5.25a.orig/CMakeLists.txt.orig	1970-01-01 01:00:00.000000000 +0100
+++ mysql-5.5.25a/CMakeLists.txt.orig	2012-08-05 01:53:10.180436100 +0200
@@ -0,0 +1,400 @@
+# Copyright (c) 2006, 2012, Oracle and/or its affiliates. All rights reserved.
+# 
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; version 2 of the License.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
+
+CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
+# Avoid warnings in higher versions
+if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 2.6)
+ CMAKE_POLICY(VERSION 2.8)
+endif()
+
+
+SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
+
+# First, decide about build type (debug or release)
+# If custom compiler flags are set or cmake is invoked with -DCMAKE_BUILD_TYPE, 
+# respect user wishes and do not (re)define CMAKE_BUILD_TYPE. If WITH_DEBUG{_FULL} 
+# is given, set CMAKE_BUILD_TYPE = Debug. Otherwise, use Relwithdebinfo.
+
+
+IF(DEFINED CMAKE_BUILD_TYPE)
+  SET(HAVE_CMAKE_BUILD_TYPE TRUE)
+ENDIF()
+SET(CUSTOM_C_FLAGS $ENV{CFLAGS})
+
+OPTION(WITH_DEBUG "Use dbug/safemutex" OFF)
+
+# Distinguish between community and non-community builds, with the
+# default being a community build. This does not impact the feature
+# set that will be compiled in; it's merely provided as a hint to
+# custom packaging steps.
+OPTION(COMMUNITY_BUILD "Set to true if this is a community build" ON) 
+
+# Use a default manufacturer if no manufacturer was identified.
+SET(MANUFACTURER_DOCSTRING
+  "Set the entity that appears as the manufacturer of packages that support a manufacturer field.")
+IF(NOT DEFINED MANUFACTURER) 
+  SET(MANUFACTURER "Built from Source" CACHE  STRING ${MANUFACTURER_DOCSTRING})
+  MARK_AS_ADVANCED(MANUFACTURER)
+ENDIF()
+
+# We choose to provide WITH_DEBUG as alias to standard CMAKE_BUILD_TYPE=Debug
+# which turns out to be not trivial, as this involves synchronization 
+# between CMAKE_BUILD_TYPE and WITH_DEBUG. Besides, we have to deal with cases
+# where WITH_DEBUG is  reset from ON to OFF  and here we need to reset 
+# CMAKE_BUILD_TYPE to either none or default RelWithDebInfo
+
+SET(BUILDTYPE_DOCSTRING
+ "Choose the type of build, options are: None(CMAKE_CXX_FLAGS or
+ CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel")
+ 
+IF(WITH_DEBUG)
+  SET(CMAKE_BUILD_TYPE "Debug" CACHE STRING ${BUILDTYPE_DOCSTRING} FORCE)
+  SET(MYSQL_MAINTAINER_MODE ON CACHE BOOL
+      "MySQL maintainer-specific development environment")
+  IF(UNIX AND NOT APPLE)
+    # Compiling with PIC speeds up embedded build, on PIC sensitive systems 
+    # Predefine it to ON, in case user chooses to build embedded. 
+    SET(WITH_PIC ON CACHE BOOL "Compile with PIC")
+  ENDIF()
+  SET(OLD_WITH_DEBUG 1 CACHE INTERNAL "" FORCE)
+ELSEIF(NOT HAVE_CMAKE_BUILD_TYPE OR OLD_WITH_DEBUG)
+  IF(CUSTOM_C_FLAGS)
+    SET(CMAKE_BUILD_TYPE "" CACHE STRING ${BUILDTYPE_DOCSTRING} FORCE)
+  ELSE(CMAKE_BUILD_TYPE MATCHES "Debug" OR NOT HAVE_CMAKE_BUILD_TYPE)
+    SET(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING 
+       ${BUILDTYPE_DOCSTRING} FORCE)
+  ENDIF()
+  SET(OLD_WITH_DEBUG 0 CACHE INTERNAL "" FORCE)
+ENDIF()
+
+# Optionally set project name, e.g.
+# foo.xcodeproj (mac) or foo.sln (windows)
+SET(MYSQL_PROJECT_NAME_DOCSTRING "MySQL project name")
+IF(DEFINED MYSQL_PROJECT_NAME)
+  SET(MYSQL_PROJECT_NAME ${MYSQL_PROJECT_NAME} CACHE STRING
+      ${MYSQL_PROJECT_NAME_DOCSTRING} FORCE)
+ELSE()
+  SET(MYSQL_PROJECT_NAME "MySQL" CACHE STRING
+      ${MYSQL_PROJECT_NAME_DOCSTRING} FORCE)
+  MARK_AS_ADVANCED(MYSQL_PROJECT_NAME)
+ENDIF()
+PROJECT(${MYSQL_PROJECT_NAME})
+
+IF(BUILD_CONFIG)
+  INCLUDE(
+  ${CMAKE_SOURCE_DIR}/cmake/build_configurations/${BUILD_CONFIG}.cmake)
+ENDIF()
+
+# Include the platform-specific file. To allow exceptions, this code
+# looks for files in order of how specific they are. If there is, for
+# example, a generic Linux.cmake and a version-specific
+# Linux-2.6.28-11-generic, it will pick Linux-2.6.28-11-generic and
+# include it. It is then up to the file writer to include the generic
+# version if necessary.
+FOREACH(_base
+    ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}-${CMAKE_SYSTEM_PROCESSOR}
+    ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}
+    ${CMAKE_SYSTEM_NAME})
+  SET(_file ${CMAKE_SOURCE_DIR}/cmake/os/${_base}.cmake)
+  IF(EXISTS ${_file})
+    INCLUDE(${_file})
+    BREAK()
+  ENDIF()
+ENDFOREACH()
+
+
+
+# Following autotools tradition, add preprocessor definitions
+# specified in environment variable CPPFLAGS
+IF(DEFINED ENV{CPPFLAGS})
+  ADD_DEFINITIONS($ENV{CPPFLAGS})
+ENDIF()
+
+#
+# Control aspects of the development environment which are
+# specific to MySQL maintainers and developers.
+#
+INCLUDE(maintainer)
+
+OPTION(MYSQL_MAINTAINER_MODE
+       "MySQL maintainer-specific development environment" OFF)
+
+# Whether the maintainer mode compiler options should be enabled.
+IF(MYSQL_MAINTAINER_MODE)
+  IF(CMAKE_C_COMPILER_ID MATCHES "GNU")
+    SET_MYSQL_MAINTAINER_GNU_C_OPTIONS()
+  ENDIF()
+  IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
+    SET_MYSQL_MAINTAINER_GNU_CXX_OPTIONS()
+  ENDIF()
+  IF(CMAKE_C_COMPILER_ID MATCHES "Intel")
+    SET_MYSQL_MAINTAINER_INTEL_C_OPTIONS()
+  ENDIF()
+  IF(CMAKE_CXX_COMPILER_ID MATCHES "Intel")
+    SET_MYSQL_MAINTAINER_INTEL_CXX_OPTIONS()
+  ENDIF()
+ENDIF()
+
+# Add macros
+INCLUDE(character_sets)
+INCLUDE(zlib)
+INCLUDE(ssl)
+INCLUDE(readline)
+INCLUDE(mysql_version)
+INCLUDE(libutils)
+INCLUDE(dtrace)
+INCLUDE(plugin)
+INCLUDE(install_macros)
+INCLUDE(install_layout)
+INCLUDE(mysql_add_executable)
+
+# Handle options
+OPTION(DISABLE_SHARED 
+ "Don't build shared libraries, compile code as position-dependent" OFF)
+IF(DISABLE_SHARED)
+  SET(WITHOUT_DYNAMIC_PLUGINS 1)
+ENDIF()
+OPTION(ENABLED_PROFILING "Enable profiling" ON)
+OPTION(CYBOZU "" OFF)
+OPTION(BACKUP_TEST "" OFF)
+OPTION(WITHOUT_SERVER OFF)
+IF(UNIX)
+  OPTION(WITH_VALGRIND "Valgrind instrumentation" OFF)
+ENDIF()
+OPTION (WITH_UNIT_TESTS "Compile MySQL with unit tests" ON)
+MARK_AS_ADVANCED(CYBOZU BACKUP_TEST WITHOUT_SERVER DISABLE_SHARED)
+
+ 
+OPTION(ENABLE_DEBUG_SYNC "Enable debug sync (debug builds only)" ON) 
+IF(ENABLE_DEBUG_SYNC) 
+  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DENABLED_DEBUG_SYNC") 
+  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DENABLED_DEBUG_SYNC") 
+ENDIF() 
+ 
+OPTION(ENABLE_GCOV "Enable gcov (debug, Linux builds only)" OFF)
+IF (ENABLE_GCOV AND NOT WIN32 AND NOT APPLE)
+  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
+  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
+  SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage -lgcov")
+ENDIF()
+
+OPTION(ENABLED_LOCAL_INFILE
+ "If we should should enable LOAD DATA LOCAL by default" ${IF_WIN})
+MARK_AS_ADVANCED(ENABLED_LOCAL_INFILE)
+
+OPTION(WITH_FAST_MUTEXES "Compile with fast mutexes" OFF)
+MARK_AS_ADVANCED(WITH_FAST_MUTEXES)
+
+# Set DBUG_OFF and other optional release-only flags for non-debug project types
+FOREACH(BUILD_TYPE RELEASE RELWITHDEBINFO MINSIZEREL)
+  FOREACH(LANG C CXX)
+    SET(CMAKE_${LANG}_FLAGS_${BUILD_TYPE} 
+     "${CMAKE_${LANG}_FLAGS_${BUILD_TYPE}} -DDBUG_OFF")
+    IF(WITH_FAST_MUTEXES)
+      SET(CMAKE_${LANG}_FLAGS_${BUILD_TYPE} 
+        "${CMAKE_${LANG}_FLAGS_${BUILD_TYPE}} -DMY_PTHREAD_FASTMUTEX=1")
+    ENDIF()
+  ENDFOREACH()
+ENDFOREACH()
+
+IF(NOT CMAKE_BUILD_TYPE
+    AND NOT CMAKE_GENERATOR MATCHES "Visual Studio" 
+    AND NOT CMAKE_GENERATOR MATCHES "Xcode") 
+    # This is the case of no CMAKE_BUILD_TYPE choosen, typical for VS and Xcode
+    # or if custom C flags are set. In VS and Xcode for non-Debug configurations 
+    # DBUG_OFF is already correctly set. Use DBUG_OFF for Makefile based projects 
+    # without build type too, unless user specifically requests DBUG. 
+    IF(NOT CMAKE_C_FLAGS MATCHES "-DDBUG_ON")
+      ADD_DEFINITIONS(-DDBUG_OFF)
+    ENDIF()
+ENDIF()
+
+# Add safemutex for debug configurations, except on Windows
+# (safemutex has never worked on Windows)
+IF(WITH_DEBUG AND NOT WIN32)
+  FOREACH(LANG C CXX)
+      SET(CMAKE_${LANG}_FLAGS_DEBUG
+          "${CMAKE_${LANG}_FLAGS_DEBUG} -DSAFE_MUTEX")
+  ENDFOREACH()
+ENDIF()
+
+
+# Set commonly used variables
+IF(WIN32)
+  SET(DEFAULT_MYSQL_HOME "C:/Program Files/MySQL/MySQL Server ${MYSQL_BASE_VERSION}" )
+  SET(SHAREDIR share)
+ELSE()
+  SET(DEFAULT_MYSQL_HOME ${CMAKE_INSTALL_PREFIX})
+  SET(SHAREDIR ${DEFAULT_MYSQL_HOME}/${INSTALL_MYSQLSHAREDIR})
+ENDIF()
+
+SET(DEFAULT_BASEDIR "${DEFAULT_MYSQL_HOME}")
+IF(INSTALL_MYSQLDATADIR MATCHES "^/.*")
+  SET(MYSQL_DATADIR ${INSTALL_MYSQLDATADIR} CACHE PATH "default MySQL data directory")
+ELSE()
+  SET(MYSQL_DATADIR "${DEFAULT_MYSQL_HOME}/${INSTALL_MYSQLDATADIR}" CACHE PATH "default MySQL data directory")
+ENDIF()
+SET(DEFAULT_CHARSET_HOME "${DEFAULT_MYSQL_HOME}")
+SET(PLUGINDIR "${DEFAULT_MYSQL_HOME}/${INSTALL_PLUGINDIR}")
+IF(SYSCONFDIR)
+  SET(DEFAULT_SYSCONFDIR "${SYSCONFDIR}")
+ENDIF()
+
+
+# Run platform tests
+INCLUDE(configure.cmake)
+
+# Common defines and includes
+ADD_DEFINITIONS(-DHAVE_CONFIG_H)
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/include)
+
+# Add bundled or system zlib.
+MYSQL_CHECK_ZLIB_WITH_COMPRESS()
+# Optionally add bundled yassl/taocrypt or system openssl.
+MYSQL_CHECK_SSL()
+# Add readline or libedit.
+MYSQL_CHECK_READLINE()
+
+#
+# Setup maintainer mode options by the end. Platform checks are
+# not run with the warning options as to not perturb fragile checks
+# (i.e. do not make warnings into errors).
+#
+IF(MYSQL_MAINTAINER_MODE)
+  # Set compiler flags required under maintainer mode.
+  MESSAGE(STATUS "C warning options: ${MY_MAINTAINER_C_WARNINGS}")
+  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MY_MAINTAINER_C_WARNINGS}")
+  MESSAGE(STATUS "C++ warning options: ${MY_MAINTAINER_CXX_WARNINGS}")
+  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MY_MAINTAINER_CXX_WARNINGS}")
+ENDIF()
+
+IF(NOT WITHOUT_SERVER)
+SET (MYSQLD_STATIC_PLUGIN_LIBS "" CACHE INTERNAL "")
+ # Add storage engines and plugins.
+ CONFIGURE_PLUGINS()
+ENDIF()
+
+ADD_SUBDIRECTORY(include)
+ADD_SUBDIRECTORY(dbug)
+ADD_SUBDIRECTORY(strings)
+ADD_SUBDIRECTORY(vio)
+ADD_SUBDIRECTORY(regex)
+ADD_SUBDIRECTORY(mysys)
+ADD_SUBDIRECTORY(libmysql)
+
+
+IF(WITH_UNIT_TESTS)
+ ENABLE_TESTING()
+ENDIF()
+IF(WITH_UNIT_TESTS)
+  ADD_SUBDIRECTORY(unittest/mytap)
+  ADD_SUBDIRECTORY(unittest/mysys)
+ENDIF()
+
+ADD_SUBDIRECTORY(extra)
+IF(NOT WITHOUT_SERVER)
+  ADD_SUBDIRECTORY(tests)
+  ADD_SUBDIRECTORY(client)
+  ADD_SUBDIRECTORY(sql)
+  ADD_SUBDIRECTORY(sql/share)
+  ADD_SUBDIRECTORY(libservices)
+  OPTION (WITH_EMBEDDED_SERVER "Compile MySQL with embedded server" OFF)
+  IF(WITH_EMBEDDED_SERVER) 
+   ADD_SUBDIRECTORY(libmysqld)
+   ADD_SUBDIRECTORY(libmysqld/examples)
+  ENDIF(WITH_EMBEDDED_SERVER)
+
+  ADD_SUBDIRECTORY(mysql-test)
+  ADD_SUBDIRECTORY(mysql-test/lib/My/SafeProcess)
+  ADD_SUBDIRECTORY(support-files)
+  ADD_SUBDIRECTORY(scripts)
+  ADD_SUBDIRECTORY(sql-bench)
+  IF(UNIX)
+    ADD_SUBDIRECTORY(man)
+  ENDIF()
+ENDIF()
+
+INCLUDE(cmake/abi_check.cmake)
+INCLUDE(cmake/tags.cmake)
+
+CONFIGURE_FILE(config.h.cmake   ${CMAKE_BINARY_DIR}/include/my_config.h)
+CONFIGURE_FILE(config.h.cmake   ${CMAKE_BINARY_DIR}/include/config.h)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/include/mysql_version.h.in
+               ${CMAKE_BINARY_DIR}/include/mysql_version.h )
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/sql/sql_builtin.cc.in
+    ${CMAKE_BINARY_DIR}/sql/sql_builtin.cc)
+CONFIGURE_FILE(
+    ${CMAKE_SOURCE_DIR}/cmake/info_macros.cmake.in ${CMAKE_BINARY_DIR}/info_macros.cmake @ONLY)
+
+# Handle the "INFO_*" files.
+INCLUDE(${CMAKE_BINARY_DIR}/info_macros.cmake)
+# Source: This can be done during the cmake phase, all information is
+# available, but should be repeated on each "make" just in case someone
+# does "cmake ; make ; bzr pull ; make".
+CREATE_INFO_SRC(${CMAKE_BINARY_DIR}/Docs)
+ADD_CUSTOM_TARGET(INFO_SRC ALL
+  COMMAND ${CMAKE_COMMAND} -P ${CMAKE_SOURCE_DIR}/cmake/info_src.cmake
+  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+# Build flags: This must be postponed to the make phase.
+ADD_CUSTOM_TARGET(INFO_BIN ALL
+  COMMAND ${CMAKE_COMMAND} -P ${CMAKE_SOURCE_DIR}/cmake/info_bin.cmake
+  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+)
+
+# Packaging
+IF(WIN32)
+  SET(CPACK_GENERATOR "ZIP")
+ELSE()
+  SET(CPACK_GENERATOR "TGZ")
+ENDIF() 
+ADD_SUBDIRECTORY(packaging/WiX)
+
+# Create a single package with "make package"
+# (see http://public.kitware.com/Bug/view.php?id=11452)
+SET(CPACK_MONOLITHIC_INSTALL 1 CACHE INTERNAL "")
+
+INCLUDE(CPack)
+IF(UNIX)
+  INSTALL(FILES Docs/mysql.info DESTINATION ${INSTALL_INFODIR} OPTIONAL COMPONENT Info)
+ENDIF()
+#
+# RPM installs documentation directly from the source tree
+#
+IF(NOT INSTALL_LAYOUT MATCHES "RPM")
+  INSTALL(FILES COPYING LICENSE.mysql 
+  DESTINATION ${INSTALL_DOCREADMEDIR} 
+  COMPONENT Readme
+  OPTIONAL
+  )
+  INSTALL(FILES README DESTINATION ${INSTALL_DOCREADMEDIR} COMPONENT Readme)
+  INSTALL(FILES ${CMAKE_BINARY_DIR}/Docs/INFO_SRC ${CMAKE_BINARY_DIR}/Docs/INFO_BIN DESTINATION ${INSTALL_DOCDIR})
+  IF(UNIX)
+    INSTALL(FILES Docs/INSTALL-BINARY DESTINATION ${INSTALL_DOCREADMEDIR} COMPONENT Readme)
+  ENDIF()
+  # MYSQL_DOCS_LOCATON is used in "make dist", points to the documentation directory
+  SET(MYSQL_DOCS_LOCATION "" CACHE PATH "Location from where documentation is copied")
+  MARK_AS_ADVANCED(MYSQL_DOCS_LOCATION)
+  INSTALL(DIRECTORY Docs/ DESTINATION ${INSTALL_DOCDIR}
+    COMPONENT Documentation
+    PATTERN "INSTALL-BINARY" EXCLUDE
+    PATTERN "Makefile.*" EXCLUDE
+    PATTERN "glibc*" EXCLUDE
+    PATTERN "linuxthreads.txt" EXCLUDE
+    PATTERN "myisam.txt" EXCLUDE
+    PATTERN "mysql.info" EXCLUDE
+    PATTERN "sp-imp-spec.txt" EXCLUDE
+  )
+ENDIF()
diff -Nru -x '*~' mysql-5.5.25a.orig/config.h.cmake mysql-5.5.25a/config.h.cmake
--- mysql-5.5.25a.orig/config.h.cmake	2012-07-02 13:35:22.000000000 +0200
+++ mysql-5.5.25a/config.h.cmake	2012-08-05 01:53:10.184436300 +0200
@@ -621,4 +621,21 @@
 #cmakedefine SIZEOF_TIME_T @SIZEOF_TIME_T@
 #cmakedefine TIME_T_UNSIGNED @TIME_T_UNSIGNED@
 
+#ifdef _WIN32
+  #if (_MSC_VER<  1500)
+    typedef struct _RTL_CONDITION_VARIABLE {
+      void* Ptr;
+    } RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;
+    typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;
+  #endif
+#endif
+
+#ifdef __MINGW32__
+#define __try
+#define __except(x) if(0)
+
+typedef void* RTL_SRWLOCK;
+typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;
+#endif
+
 #endif
diff -Nru -x '*~' mysql-5.5.25a.orig/include/my_pthread.h mysql-5.5.25a/include/my_pthread.h
--- mysql-5.5.25a.orig/include/my_pthread.h	2012-07-02 13:35:22.000000000 +0200
+++ mysql-5.5.25a/include/my_pthread.h	2012-08-05 01:53:10.191436700 +0200
@@ -53,6 +53,13 @@
   We use native conditions on Vista and later, and fallback to own 
   implementation on earlier OS version.
 */
+typedef enum 
+{
+    SIGNAL= 0,
+    BROADCAST= 1,
+    MAX_EVENTS= 2
+} EVENTS;
+    
 typedef union
 {
   /* Native condition (used on Vista and later) */
@@ -63,12 +70,6 @@
   { 
     uint32 waiting;
     CRITICAL_SECTION lock_waiting;
-    enum 
-    {
-      SIGNAL= 0,
-      BROADCAST= 1,
-      MAX_EVENTS= 2
-    } EVENTS;
     HANDLE events[MAX_EVENTS];
     HANDLE broadcast_block_event;
   };
@@ -99,11 +100,14 @@
   FILETIME ft;
   __int64 i64;
  };
-struct timespec {
+ 
+struct my_timespec {
   union ft64 tv;
   /* The max timeout value in millisecond for pthread_cond_timedwait */
   long max_timeout_msec;
 };
+#define timespec my_timespec
+
 #define set_timespec(ABSTIME,SEC) { \
   GetSystemTimeAsFileTime(&((ABSTIME).tv.ft)); \
   (ABSTIME).tv.i64+= (__int64)(SEC)*10000000; \
diff -Nru -x '*~' mysql-5.5.25a.orig/libmysql/authentication_win/common.h mysql-5.5.25a/libmysql/authentication_win/common.h
--- mysql-5.5.25a.orig/libmysql/authentication_win/common.h	2012-07-02 13:35:22.000000000 +0200
+++ mysql-5.5.25a/libmysql/authentication_win/common.h	2012-08-05 11:01:01.224575000 +0200
@@ -70,7 +70,7 @@
                       const char *fmt, va_list args);
 
 template <error_log_level::type Level>
-void error_log_print(const char *fmt, ...)
+inline void error_log_print(const char *fmt, ...)
 {
   va_list args;
   va_start(args, fmt);
diff -Nru -x '*~' mysql-5.5.25a.orig/libmysql/authentication_win/handshake.h mysql-5.5.25a/libmysql/authentication_win/handshake.h
--- mysql-5.5.25a.orig/libmysql/authentication_win/handshake.h	2012-07-02 13:35:22.000000000 +0200
+++ mysql-5.5.25a/libmysql/authentication_win/handshake.h	2012-08-05 01:53:10.199437200 +0200
@@ -100,7 +100,7 @@
   Handshake(const char *ssp, side_t side);
   virtual ~Handshake();
 
-  int Handshake::packet_processing_loop();
+  int packet_processing_loop();
 
   bool virtual is_complete() const
   {
diff -Nru -x '*~' mysql-5.5.25a.orig/scripts/CMakeLists.txt mysql-5.5.25a/scripts/CMakeLists.txt
--- mysql-5.5.25a.orig/scripts/CMakeLists.txt	2012-07-02 13:35:22.000000000 +0200
+++ mysql-5.5.25a/scripts/CMakeLists.txt	2012-08-05 01:53:10.206437600 +0200
@@ -33,8 +33,7 @@
     ${CMAKE_CURRENT_BINARY_DIR}/mysql_fix_privilege_tables.sql
   )
 ELSEIF(WIN32)
-  FILE(TO_NATIVE_PATH ${CMAKE_CURRENT_BINARY_DIR}/mysql_fix_privilege_tables.sql
-   native_outfile )
+  string(REPLACE "/" "\\" native_outfile "${CMAKE_CURRENT_BINARY_DIR}/mysql_fix_privilege_tables.sql")
   SET(CAT_COMMAND
    COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR}
    cmd /c copy /b mysql_system_tables.sql + mysql_system_tables_fix.sql
diff -Nru -x '*~' mysql-5.5.25a.orig/sql/item_strfunc.cc mysql-5.5.25a/sql/item_strfunc.cc
--- mysql-5.5.25a.orig/sql/item_strfunc.cc	2012-07-02 13:35:21.000000000 +0200
+++ mysql-5.5.25a/sql/item_strfunc.cc	2012-08-05 01:53:10.215438100 +0200
@@ -3799,7 +3799,7 @@
         with a clock_seq value (initialized random below), we use a separate
         randominit() here
       */
-      randominit(&uuid_rand, tmp + (ulong) thd, tmp + (ulong)global_query_id);
+      randominit(&uuid_rand, tmp + (uintptr_t) thd, tmp + (ulong)global_query_id);
       for (i=0; i < (int)sizeof(mac); i++)
         mac[i]=(uchar)(my_rnd(&uuid_rand)*255);
       /* purecov: end */    
diff -Nru -x '*~' mysql-5.5.25a.orig/sql/mysqld.cc mysql-5.5.25a/sql/mysqld.cc
--- mysql-5.5.25a.orig/sql/mysqld.cc	2012-07-02 13:35:21.000000000 +0200
+++ mysql-5.5.25a/sql/mysqld.cc	2012-08-05 01:53:10.229438900 +0200
@@ -4792,7 +4792,7 @@
 	if (my_strcasecmp(system_charset_info, argv[1],"mysql"))
 	  load_default_groups[load_default_groups_sz-2]= argv[1];
         start_mode= 1;
-        Service.Init(argv[1], mysql_service);
+        Service.Init(argv[1], (void**) mysql_service);
         return 0;
       }
     }
@@ -4813,7 +4813,7 @@
 	start_mode= 1;
 	if (my_strcasecmp(system_charset_info, argv[2],"mysql"))
 	  load_default_groups[load_default_groups_sz-2]= argv[2];
-	Service.Init(argv[2], mysql_service);
+	Service.Init(argv[2], (void**) mysql_service);
 	return 0;
       }
     }
@@ -4846,7 +4846,7 @@
     {
       /* start the default service */
       start_mode= 1;
-      Service.Init(MYSQL_SERVICENAME, mysql_service);
+      Service.Init(MYSQL_SERVICENAME, (void**) mysql_service);
       return 0;
     }
   }
diff -Nru -x '*~' mysql-5.5.25a.orig/sql/sql_class.cc mysql-5.5.25a/sql/sql_class.cc
--- mysql-5.5.25a.orig/sql/sql_class.cc	2012-07-02 13:35:21.000000000 +0200
+++ mysql-5.5.25a/sql/sql_class.cc	2012-08-05 01:53:10.251440100 +0200
@@ -874,7 +874,7 @@
 
   tablespace_op=FALSE;
   tmp= sql_rnd_with_mutex();
-  randominit(&rand, tmp + (ulong) &rand, tmp + (ulong) ::global_query_id);
+  randominit(&rand, tmp + (uintptr_t) &rand, tmp + (ulong) ::global_query_id);
   substitute_null_with_insert_id = FALSE;
   thr_lock_info_init(&lock_info); /* safety: will be reset after start */
 
diff -Nru -x '*~' mysql-5.5.25a.orig/sql/sql_show.cc mysql-5.5.25a/sql/sql_show.cc
--- mysql-5.5.25a.orig/sql/sql_show.cc	2012-07-02 13:35:21.000000000 +0200
+++ mysql-5.5.25a/sql/sql_show.cc	2012-08-05 01:53:10.264440900 +0200
@@ -2253,21 +2253,21 @@
         */
         switch (show_type) {
         case SHOW_DOUBLE_STATUS:
-          value= ((char *) status_var + (ulong) value);
+          value= ((char *) status_var + (uintptr_t) value);
           /* fall through */
         case SHOW_DOUBLE:
           /* 6 is the default precision for '%f' in sprintf() */
           end= buff + my_fcvt(*(double *) value, 6, buff, NULL);
           break;
         case SHOW_LONG_STATUS:
-          value= ((char *) status_var + (ulong) value);
+          value= ((char *) status_var + (uintptr_t) value);
           /* fall through */
         case SHOW_LONG:
         case SHOW_LONG_NOFLUSH: // the difference lies in refresh_status()
           end= int10_to_str(*(long*) value, buff, 10);
           break;
         case SHOW_LONGLONG_STATUS:
-          value= ((char *) status_var + (ulong) value);
+          value= ((char *) status_var + (uintptr_t) value);
           /* fall through */
         case SHOW_LONGLONG:
           end= longlong10_to_str(*(longlong*) value, buff, 10);
@@ -2315,11 +2315,11 @@
           break;
         }
         case SHOW_KEY_CACHE_LONG:
-          value= (char*) dflt_key_cache + (ulong)value;
+          value= (char*) dflt_key_cache + (uintptr_t)value;
           end= int10_to_str(*(long*) value, buff, 10);
           break;
         case SHOW_KEY_CACHE_LONGLONG:
-          value= (char*) dflt_key_cache + (ulong)value;
+          value= (char*) dflt_key_cache + (uintptr_t)value;
 	  end= longlong10_to_str(*(longlong*) value, buff, 10);
 	  break;
         case SHOW_UNDEF:
diff -Nru -x '*~' mysql-5.5.25a.orig/storage/innobase/include/univ.i mysql-5.5.25a/storage/innobase/include/univ.i
--- mysql-5.5.25a.orig/storage/innobase/include/univ.i	2012-07-02 13:35:21.000000000 +0200
+++ mysql-5.5.25a/storage/innobase/include/univ.i	2012-08-05 11:23:30.389742900 +0200
@@ -257,7 +257,7 @@
 #ifndef UNIV_MUST_NOT_INLINE
 /* Definition for inline version */
 
-#ifdef __WIN__
+#ifdef _MSC_VER
 # define UNIV_INLINE	__inline
 #elif defined(__SUNPRO_CC) || defined(__SUNPRO_C)
 # define UNIV_INLINE static inline
