From 1dea0ce352d0e7d03f1eca629a823d9d10427de8 Mon Sep 17 00:00:00 2001
From: Ralf Habacker <ralf.habacker@freenet.de>
Date: Tue, 23 Aug 2011 13:18:27 +0200
Subject: [PATCH] add cmake build system

---
 CMakeLists.txt        |  154 +++++++++++++++++++++++++++++++++++++++++
 config.h.cmake        |    7 ++
 pixman/CMakeLists.txt |  184 +++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 345 insertions(+), 0 deletions(-)
 create mode 100644 CMakeLists.txt
 create mode 100644 config.h.cmake
 create mode 100644 pixman/CMakeLists.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..39e153e
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,154 @@
+project(pixman)
+
+cmake_minimum_required(VERSION 2.8)
+
+#########################################################################
+# detect version
+#########################################################################
+file (READ configure.ac configure_ac)
+string (REGEX REPLACE ".*pixman_major], ([0-9]+).*" "\\1" PIXMAN_VERSION_MAJOR ${configure_ac})
+string (REGEX REPLACE ".*pixman_minor], ([0-9]+).*" "\\1" PIXMAN_VERSION_MINOR ${configure_ac})
+string (REGEX REPLACE ".*pixman_micro], ([0-9]+).*" "\\1" PIXMAN_VERSION_MICRO ${configure_ac})
+
+add_definitions(-DHAVE_CONFIG_H)
+
+configure_file(config.h.cmake ${CMAKE_BINARY_DIR}/config.h)
+
+include_directories(
+	${CMAKE_BINARY_DIR}
+	${CMAKE_BINARY_DIR}/pixman
+	${CMAKE_SOURCE_DIR}/pixman
+)
+
+set(pkgconfig_DATA pixman-1.pc)
+
+#$(pkgconfig_DATA): pixman-1.pc.in
+
+#snapshot:
+#	distdir="$(distdir)-`date '+%Y%m%d'`"; \
+#	test -d "$(srcdir)/.git" && distdir=$$distdir-`cd "$(srcdir)" && git rev-parse HEAD | cut -c 1-6`; \
+#	$(MAKE) $(AM_MAKEFLAGS) distdir="$$distdir" dist
+
+#set(GPGKEY=6FF7C1A8)
+#set(USERNAME=$$USER)
+#set(RELEASE_OR_SNAPSHOT = $$(if test "x$(PIXMAN_VERSION_MINOR)" = "x$$(echo "$(PIXMAN_VERSION_MINOR)/2*2" | bc)" ; then echo release; else echo snapshot; fi)
+#set(RELEASE_CAIRO_HOST =	$(USERNAME)@cairographics.org
+#set(RELEASE_CAIRO_DIR =	/srv/cairo.freedesktop.org/www/$(RELEASE_OR_SNAPSHOT)s
+#set(RELEASE_CAIRO_URL = 	http://cairographics.org/$(RELEASE_OR_SNAPSHOT)s
+#set(RELEASE_XORG_URL =	http://xorg.freedesktop.org/archive/individual/lib
+#set(RELEASE_XORG_HOST =	$(USERNAME)@xorg.freedesktop.org
+#set(RELEASE_XORG_DIR =	/srv/xorg.freedesktop.org/archive/individual/lib
+#set(RELEASE_ANNOUNCE_LIST = cairo-announce@cairographics.org, xorg-announce@lists.freedesktop.org, pixman@lists.freedesktop.org
+
+#tar_gz = $(PACKAGE)-$(VERSION).tar.gz
+#tar_bz2 = $(PACKAGE)-$(VERSION).tar.bz2
+
+#sha1_tgz = $(tar_gz).sha1
+#md5_tgz = $(tar_gz).md5
+
+#sha1_tbz2 = $(tar_bz2).sha1
+#md5_tbz2 = $(tar_bz2).md5
+
+#gpg_file = $(sha1_tgz).asc
+#
+#$(sha1_tgz): $(tar_gz)
+#	sha1sum $^ > $@
+#
+#$(md5_tgz): $(tar_gz)
+#	md5sum $^ > $@
+#
+#$(sha1_tbz2): $(tar_bz2)
+#	sha1sum $^ > $@
+#
+#$(md5_tbz2): $(tar_bz2)
+#	md5sum $^ > $@
+#
+#$(gpg_file): $(sha1_tgz)
+#	@echo "Please enter your GPG password to sign the checksum."
+#	gpg --armor --sign $^
+#
+#HASHFILES = $(sha1_tgz) $(sha1_tbz2) $(md5_tgz) $(md5_tbz2)
+#
+#release-verify-newer:
+#	@echo -n "Checking that no $(VERSION) release already exists at $(RELEASE_XORG_HOST)..."
+#	@ssh $(RELEASE_XORG_HOST) test ! -e $(RELEASE_XORG_DIR)/$(tar_gz) \
+#		|| (echo "Ouch." && echo "Found: $(RELEASE_XORG_HOST):$(RELEASE_XORG_DIR)/$(tar_gz)" \
+#		&& echo "Refusing to try to generate a new release of the same name." \
+#		&& false)
+#	@ssh $(RELEASE_CAIRO_HOST) test ! -e $(RELEASE_CAIRO_DIR)/$(tar_gz) \
+#		|| (echo "Ouch." && echo "Found: $(RELEASE_CAIRO_HOST):$(RELEASE_CAIRO_DIR)/$(tar_gz)" \
+#		&& echo "Refusing to try to generate a new release of the same name." \
+#		&& false)
+#	@echo "Good."
+#
+#release-remove-old:
+#	$(RM) $(tar_gz) $(tar_bz2) $(HASHFILES) $(gpg_file)
+#
+#ensure-prev:
+#	@if [[ "$(PREV)" == "" ]]; then							\
+#		echo ""							          &&	\
+#		echo "You must set the PREV variable on the make command line to" &&	\
+#		echo "the last version."				  	  &&	\
+#		echo ""								  &&	\
+#		echo "For example:"						  &&	\
+#		echo "      make PREV=0.7.3"				  	  &&	\
+#		echo ""								  &&	\
+#		false;									\
+#	fi
+#
+#release-check: ensure-prev release-verify-newer release-remove-old distcheck
+#
+#release-tag:
+#	git tag -u $(GPGKEY) -m "$(PACKAGE) $(VERSION) release" $(PACKAGE)-$(VERSION)
+#
+#release-upload: release-check $(tar_gz) $(tar_bz2) $(sha1_tgz) $(sha1_tbz2) $(md5_tgz) $(gpg_file)
+#	scp $(tar_gz) $(sha1_tgz) $(gpg_file) $(RELEASE_CAIRO_HOST):$(RELEASE_CAIRO_DIR)
+#	scp $(tar_gz) $(tar_bz2) $(RELEASE_XORG_HOST):$(RELEASE_XORG_DIR)
+#	ssh $(RELEASE_CAIRO_HOST) "rm -f $(RELEASE_CAIRO_DIR)/LATEST-$(PACKAGE)-[0-9]* && ln -s $(tar_gz) $(RELEASE_CAIRO_DIR)/LATEST-$(PACKAGE)-$(VERSION)"
+#
+#release-publish-message: $(HASHFILES) ensure-prev
+#	@echo "Please follow the instructions in RELEASING to push stuff out and"
+#	@echo "send out the announcement mails.  Here is the excerpt you need:"
+#	@echo ""
+#	@echo "Lists:  $(RELEASE_ANNOUNCE_LIST)"
+#	@echo "Subject: [ANNOUNCE] $(PACKAGE) release $(VERSION) now available"
+#	@echo "============================== CUT HERE =============================="
+#	@echo "A new $(PACKAGE) release $(VERSION) is now available"
+#	@echo ""
+#	@echo "tar.gz:"
+#	@echo "	$(RELEASE_CAIRO_URL)/$(tar_gz)"
+#	@echo "	$(RELEASE_XORG_URL)/$(tar_gz)"
+#	@echo ""
+#	@echo "tar.bz2:"
+#	@echo "	$(RELEASE_XORG_URL)/$(tar_bz2)"
+#	@echo ""
+#	@echo "Hashes:"
+#	@echo -n "	MD5:  "
+#	@cat $(md5_tgz)
+#	@echo -n "	MD5:  "
+#	@cat $(md5_tbz2)
+#	@echo -n "	SHA1: "
+#	@cat $(sha1_tgz)
+#	@echo -n "	SHA1: "
+#	@cat $(sha1_tbz2)
+#	@echo ""
+#	@echo "GPG signature:"
+#	@echo "	$(RELEASE_CAIRO_URL)/$(gpg_file)"
+#	@echo "	(signed by `git config --get user.name` <`git config --get user.email`>)"
+#	@echo ""
+#	@echo "Git:"
+#	@echo "	git://git.freedesktop.org/git/pixman"
+#	@echo "	tag: $(PACKAGE)-$(VERSION)"
+#	@echo ""
+#	@echo "Log:"
+#	@git log --no-merges "$(PACKAGE)-$(PREV)".."$(PACKAGE)-$(VERSION)" | git shortlog | awk '{ printf "\t"; print ; }' | cut -b1-80
+#	@echo "============================== CUT HERE =============================="
+#	@echo ""
+#
+#release-publish: release-upload release-tag release-publish-message
+#
+#.PHONY: release-upload release-publish release-publish-message release-tag
+
+add_subdirectory(pixman)
+#add_subdirectory(demos)
+#add_subdirectory(test)
diff --git a/config.h.cmake b/config.h.cmake
new file mode 100644
index 0000000..0385196
--- /dev/null
+++ b/config.h.cmake
@@ -0,0 +1,7 @@
+/* This file is generated by cmake. Do not edit. */
+#ifndef CONFIG_H
+#define CONFIG_H
+
+#define PACKAGE
+
+#endif
\ No newline at end of file
diff --git a/pixman/CMakeLists.txt b/pixman/CMakeLists.txt
new file mode 100644
index 0000000..229720e
--- /dev/null
+++ b/pixman/CMakeLists.txt
@@ -0,0 +1,184 @@
+#
+#CC   = cl
+#LINK = link
+#
+#CFG_VAR = $(CFG)
+#ifeq ($(CFG_VAR),)
+#CFG_VAR=release
+#endif
+#
+#MMX_VAR = $(MMX)
+#ifeq ($(MMX_VAR),)
+#MMX_VAR=on
+#endif
+#
+#SSE2_VAR = $(SSE2)
+#ifeq ($(SSE2_VAR),)
+#SSE2_VAR=on
+#endif
+#
+#CFLAGS     = -MD -nologo -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -I../pixman/src -I. -DPACKAGE=$(LIBRARY) -DPACKAGE_VERSION="" -DPACKAGE_BUGREPORT=""
+#MMX_CFLAGS = -DUSE_MMX -w14710 -w14714
+#SSE2_CFLAGS = -DUSE_SSE2
+#
+## optimization flags
+#ifeq ($(CFG_VAR),debug)
+#CFLAGS += -Od -Zi
+#else
+#CFLAGS += -O2
+#endif
+#
+configure_file(pixman-version.h.in ${CMAKE_CURRENT_BINARY_DIR}/pixman-version.h)
+
+set(SOURCES
+	pixman-image.c
+	pixman-access.c
+	pixman-access-accessors.c
+	pixman-region16.c
+	pixman-region32.c
+	pixman-combine32.c
+	pixman-combine64.c
+	pixman-utils.c
+	pixman-edge.c
+	pixman-edge-accessors.c
+	pixman-trap.c
+	pixman-timer.c
+	pixman-matrix.c
+	pixman-gradient-walker.c
+	pixman-conical-gradient.c
+	pixman-linear-gradient.c
+	pixman-radial-gradient.c
+	pixman-bits-image.c
+	pixman.c
+	pixman-noop.c
+	pixman-cpu.c
+	pixman-fast-path.c
+	pixman-implementation.c
+	pixman-solid-fill.c
+	pixman-general.c
+)
+
+set (BUILT_SOURCES pixman-combine32.h pixman-combine32.c pixman-combine64.h pixman-combine64.c)
+
+# MMX compilation flags
+if(MMX_VAR)
+	add_definitions(${MMX_CFLAGS})
+	list(APPEND SOURCES pixman-mmx.c)
+endif()
+
+# SSE2 compilation flags
+if(SSE2_VAR)
+	add_definitions(${SSE2_CFLAGS})
+	list(APPEND SOURCES pixman-sse2.c)
+endif()
+
+add_library(pixman-1 STATIC ${SOURCES})
+target_link_libraries(pixman-1)
+install(TARGETS pixman-1 RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+install(FILES pixman.h ${CMAKE_CURRENT_BINARY_DIR}/pixman-version.h DESTINATION include/pixman-1)
+
+
+# targets
+#all: inform informMMX informSSE2 $(CFG_VAR)/$(LIBRARY).lib
+#	@exit 0
+#clean: inform clean_r
+#	@exit 0
+#pixman: inform informMMX informSSE2 $(CFG_VAR)/$(LIBRARY).lib
+#	@exit 0
+#
+#inform:
+#ifneq ($(CFG),release)
+#ifneq ($(CFG),debug)
+#ifneq ($(CFG),)
+#	@echo "Invalid specified configuration option : "$(CFG)"."
+#	@echo
+#	@echo -n "Possible choices for configuration are "
+#	@echo "'release' and 'debug'"
+#	@echo ""
+#	@exit 1
+#endif
+#	@echo "Using default RELEASE configuration... (use CFG=release or CFG=debug)"
+#endif
+#endif
+#
+#informMMX:
+#ifneq ($(MMX),off)
+#ifneq ($(MMX),on)
+#ifneq ($(MMX),)
+#	@echo "Invalid specified MMX option : "$(MMX_VAR)"."
+#	@echo
+#	@echo -n "Possible choices for MMX are 'on' or 'off'"
+#	@echo ""
+#	@exit 1
+#endif
+#	@echo "Setting MMX flag to default value 'on'... (use MMX=on or MMX=off)"
+#endif
+#endif
+#
+#informSSE2:
+#ifneq ($(SSE2),off)
+#ifneq ($(SSE2),on)
+#ifneq ($(SSE2),)
+#	@echo "Invalid specified SSE option : "$(SSE2)"."
+#	@echo
+#	@echo -n "Possible choices for SSE2 are 'on' or 'off'"
+#	@echo ""
+#	@exit 1
+#endif
+#	@echo "Setting SSE2 flag to default value 'on'... (use SSE2=on or SSE2=off)"
+#endif
+#endif
+#
+## pixman compilation and linking
+#$(CFG_VAR)/%.obj: %.c $(BUILT_SOURCES)
+#	@mkdir -p $(CFG_VAR)
+#	@$(CC) -c $(CFLAGS) -Fo"$@" $<
+#
+#$(CFG_VAR)/$(LIBRARY).lib: $(OBJECTS)
+#	lib -NOLOGO -OUT:$@ $(OBJECTS) || exit 0
+#
+#pixman-combine32.c: pixman-combine.c.template pixman-combine32.h make-combine.pl
+#	perl ./make-combine.pl 8 < $< > $@ || ($(RM) $@; exit 1)
+#pixman-combine32.h: pixman-combine.h.template make-combine.pl
+#	perl ./make-combine.pl 8 < $< > $@ || ($(RM) $@; exit 1)
+#
+add_dependencies(pixman-1  pixman-combine32.c pixman-combine32.h pixman-combine64.c pixman-combine64.h)
+add_custom_command(
+	OUTPUT pixman-combine32.c
+    COMMAND perl ${CMAKE_CURRENT_SOURCE_DIR}/make-combine.pl 8 < ${CMAKE_CURRENT_SOURCE_DIR}/pixman-combine.c.template > ${CMAKE_CURRENT_BINARY_DIR}/pixman-combine32.c
+    DEPENDS pixman-combine.c.template pixman-combine32.h make-combine.pl
+    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+    COMMENT "generating pixman-combine32.c"
+)
+
+add_custom_command(
+	OUTPUT pixman-combine32.h
+    COMMAND perl ${CMAKE_CURRENT_SOURCE_DIR}/make-combine.pl 8 < ${CMAKE_CURRENT_SOURCE_DIR}/pixman-combine.h.template > ${CMAKE_CURRENT_BINARY_DIR}/pixman-combine32.h
+    DEPENDS pixman-combine.h.template make-combine.pl
+    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+    COMMENT "generating pixman-combine32.h"
+)
+#pixman-combine64.c: pixman-combine.c.template pixman-combine64.h make-combine.pl
+#	perl ./make-combine.pl 16 < $< > $@ || ($(RM) $@; exit 1)
+#pixman-combine64.h: pixman-combine.h.template make-combine.pl
+#	perl ./make-combine.pl 16 < $< > $@ || ($(RM) $@; exit 1)
+#
+add_custom_command(
+	OUTPUT pixman-combine64.c
+    COMMAND perl ${CMAKE_CURRENT_SOURCE_DIR}/make-combine.pl 16 < ${CMAKE_CURRENT_SOURCE_DIR}/pixman-combine.c.template > ${CMAKE_CURRENT_BINARY_DIR}/pixman-combine64.c
+    DEPENDS pixman-combine.c.template pixman-combine64.h make-combine.pl
+    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+    COMMENT "generating pixman-combine32.c"
+)
+
+add_custom_command(
+	OUTPUT pixman-combine64.h
+    COMMAND perl ${CMAKE_CURRENT_SOURCE_DIR}/make-combine.pl 16 < ${CMAKE_CURRENT_SOURCE_DIR}/pixman-combine.h.template > ${CMAKE_CURRENT_BINARY_DIR}/pixman-combine64.h
+    DEPENDS pixman-combine.h.template make-combine.pl
+    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+    COMMENT "generating pixman-combine32.c"
+)
+#clean_r:
+#	@rm -f $(CFG_VAR)/*.obj $(CFG_VAR)/*.lib $(CFG_VAR)/*.pdb $(CFG)/*.ilk || exit 0
+#	@rm -f $(CFG)/*.obj $(CFG)/*.lib $(CFG)/*.pdb $(CFG)/*.ilk $(BUILT_SOURCES) || exit 0
+#
\ No newline at end of file
-- 
1.7.4.msysgit.0

