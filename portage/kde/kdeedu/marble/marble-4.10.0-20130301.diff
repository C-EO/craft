diff -Nru -x '*~' marble-4.10.1.orig/src/lib/global.h marble-4.10.1/src/lib/global.h
--- marble-4.10.1.orig/src/lib/global.h	2013-03-01 07:49:41.937428000 +0100
+++ marble-4.10.1/src/lib/global.h	2013-03-05 19:53:47.628532700 +0100
@@ -1,2 +1,4 @@
 #include "MarbleGlobal.h"
+#ifdef __GNUC__
 #warning global.h is deprecated. Please #include <marble/MarbleGlobal.h> instead (no further changes needed).
+#endif
diff -Nru -x '*~' marble-4.10.1.orig/src/lib/MarbleRunnerManager.cpp marble-4.10.1/src/lib/MarbleRunnerManager.cpp
--- marble-4.10.1.orig/src/lib/MarbleRunnerManager.cpp	2013-03-01 07:49:42.205425000 +0100
+++ marble-4.10.1/src/lib/MarbleRunnerManager.cpp	2013-03-06 00:08:04.752923800 +0100
@@ -127,7 +127,7 @@
 void MarbleRunnerManagerPrivate::cleanupSearchTask( RunnerTask* task )
 {
     m_searchTasks.removeAll( task );
-    mDebug() << "removing search task" << m_searchTasks.size() << (long)task;
+    mDebug() << "removing search task" << m_searchTasks.size() << (quintptr)task;
     if ( m_searchTasks.isEmpty() ) {
         if( m_placemarkContainer.isEmpty() ) {
             emit q->searchResultChanged( m_model );
@@ -141,7 +141,7 @@
 void MarbleRunnerManagerPrivate::cleanupReverseGeocodingTask( RunnerTask* task )
 {
     m_reverseTasks.removeAll( task );
-    mDebug() << "removing task " << m_reverseTasks.size() << " " << (long)task;
+    mDebug() << "removing task " << m_reverseTasks.size() << " " << (quintptr)task;
     if ( m_reverseTasks.isEmpty() ) {
         emit q->reverseGeocodingFinished();
     }
@@ -150,7 +150,7 @@
 void MarbleRunnerManagerPrivate::cleanupRoutingTask( RunnerTask* task )
 {
     m_routingTasks.removeAll( task );
-    mDebug() << "removing task " << m_routingTasks.size() << " " << (long)task;
+    mDebug() << "removing task " << m_routingTasks.size() << " " << (quintptr)task;
     if ( m_routingTasks.isEmpty() ) {
         if ( m_routingResult.isEmpty() ) {
             emit q->routeRetrieved( 0 );
@@ -163,7 +163,7 @@
 void MarbleRunnerManagerPrivate::cleanupParsingTask( RunnerTask* task )
 {
     m_parsingTasks.removeAll( task );
-    mDebug() << "removing task " << m_parsingTasks.size() << " " << (long)task;
+    mDebug() << "removing task " << m_parsingTasks.size() << " " << (quintptr)task;
 
     if ( m_parsingTasks.isEmpty() ) {
         emit q->parsingFinished();
@@ -215,7 +215,7 @@
         SearchTask* task = new SearchTask( plugin->newRunner(), this, d->m_marbleModel, searchTerm, preferred );
         connect( task, SIGNAL( finished( RunnerTask* ) ), this, SLOT( cleanupSearchTask( RunnerTask* ) ) );
         d->m_searchTasks << task;
-        mDebug() << "search task " << plugin->nameId() << " " << (long)task;
+        mDebug() << "search task " << plugin->nameId() << " " << (quintptr)task;
         QThreadPool::globalInstance()->start( task );
     }
 
@@ -283,7 +283,7 @@
     foreach( const ReverseGeocodingRunnerPlugin* plugin, plugins ) {
         ReverseGeocodingTask* task = new ReverseGeocodingTask( plugin->newRunner(), this, d->m_marbleModel, coordinates );
         connect( task, SIGNAL( finished( RunnerTask* ) ), this, SLOT( cleanupReverseGeocodingTask(RunnerTask*) ) );
-        mDebug() << "reverse task " << plugin->nameId() << " " << (long)task;
+        mDebug() << "reverse task " << plugin->nameId() << " " << (quintptr)task;
         d->m_reverseTasks << task;
         QThreadPool::globalInstance()->start( task );
     }
@@ -337,7 +337,7 @@
 
         RoutingTask* task = new RoutingTask( plugin->newRunner(), this, d->m_marbleModel, request );
         connect( task, SIGNAL( finished( RunnerTask* ) ), this, SLOT( cleanupRoutingTask( RunnerTask* ) ) );
-        mDebug() << "route task " << plugin->nameId() << " " << (long)task;
+        mDebug() << "route task " << plugin->nameId() << " " << (quintptr)task;
         d->m_routingTasks << task;
         QThreadPool::globalInstance()->start( task );
     }
@@ -385,7 +385,7 @@
         if ( extensions.isEmpty() || extensions.contains( suffix ) || extensions.contains( completeSuffix ) ) {
             ParsingTask *task = new ParsingTask( plugin->newRunner(), this, fileName, role );
             connect( task, SIGNAL( finished( RunnerTask* ) ), this, SLOT( cleanupParsingTask(RunnerTask*) ) );
-            mDebug() << "parse task " << plugin->nameId() << " " << (long)task;
+            mDebug() << "parse task " << plugin->nameId() << " " << (quintptr)task;
             parsingTasks << task;
         }
     }
