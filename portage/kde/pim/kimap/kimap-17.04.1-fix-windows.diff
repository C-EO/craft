--- kimap-17.04.1/src/CMakeLists.txt--
+++ kimap-17.04.1/src/CMakeLists.txt
@@ -4,6 +4,8 @@ remove_definitions(-DQT_NO_CAST_FROM_BYTEARRAY)
 # Turn exceptions on
 kde_enable_exceptions()
 
+include_directories(${Sasl2_INCLUDE_DIRS})
+
 set(kimap_SRCS
    acl.cpp
    acljobbase.cpp
--- kimap-17.04.1/src/sessionlogger.cpp--
+++ kimap-17.04.1/src/sessionlogger.cpp
@@ -22,7 +22,11 @@
 
 #include "kimap_debug.h"
 
+#ifdef WIN32
+#include <process.h>
+#else
 #include <unistd.h> // for getpid()
+#endif
 
 using namespace KIMAP;
 
@@ -33,8 +37,14 @@ SessionLogger::SessionLogger()
     m_id = ++nextId;
 
     m_file.setFileName(QLatin1String(qgetenv("KIMAP_LOGFILE"))
-                       + QLatin1Char('.') + QString::number(getpid())
-                       + QLatin1Char('.') + QString::number(m_id));
+                       + QLatin1Char('.')
+                   #ifdef WIN32
+                       + QString::number(_getpid())
+                   #else
+                       + QString::number(getpid())
+                   #endif
+                       + QLatin1Char('.')
+                       + QString::number(m_id));
     if (!m_file.open(QFile::WriteOnly)) {
         qCWarning(KIMAP_LOG) << "Could not open log file for writing:" << m_file.fileName();
     }
--- kimap-17.04.1/src/common.h
+++ kimap-17.04.1/src/common.h
@@ -23,6 +23,7 @@
 #include <stdio.h>
 #include <QFile>
 #include <QDir>
+#include <QCoreApplication>

 extern "C" {
 #include <sasl/sasl.h>
@@ -30,13 +31,17 @@ extern "C" {

 inline bool initSASL()
 {
-#ifdef Q_OS_WIN32  //krazy:exclude=cpp
-    QByteArray libInstallPath(QFile::encodeName(QDir::toNativeSeparators(KGlobal::dirs()->installPath("lib") + QLatin1String("sasl2"))));
-    QByteArray configPath(QFile::encodeName(QDir::toNativeSeparators(KGlobal::dirs()->installPath("config") + QLatin1String("sasl2"))));
-    if (sasl_set_path(SASL_PATH_TYPE_PLUGIN, libInstallPath.data()) != SASL_OK ||
-            sasl_set_path(SASL_PATH_TYPE_CONFIG, configPath.data()) != SASL_OK) {
-        fprintf(stderr, "SASL path initialization failed!\n");
-        return false;
+#ifdef Q_OS_WIN  //krazy:exclude=cpp
+    for (const auto &path : QCoreApplication::libraryPaths()) {
+        QDir dir(path);
+        if (dir.exists(QStringLiteral("sasl2"))) {
+            auto libInstallPath = QFile::encodeName(dir.absoluteFilePath(QStringLiteral("sasl2")));
+            if (sasl_set_path(SASL_PATH_TYPE_PLUGIN, libInstallPath.data()) != SASL_OK) {
+                fprintf(stderr, "SASL path initialization failed!\n");
+                return false;
+            }
+            break;
+        }
     }
 #endif

