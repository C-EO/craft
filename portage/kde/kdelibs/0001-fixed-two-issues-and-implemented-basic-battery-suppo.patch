From 7838265ff8cba72363699159a0b9d7650902bcfb Mon Sep 17 00:00:00 2001
From: Patrick von Reth <vonreth@kde.org>
Date: Wed, 27 Jun 2012 14:17:24 +0200
Subject: [PATCH] fixed two issues and implemented basic battery support

---
 solid/solid/backends/wmi/wmibattery.cpp |   76 +++++++++---------------------
 solid/solid/backends/wmi/wmibattery.h   |    1 +
 solid/solid/backends/wmi/wmidevice.cpp  |   29 ++----------
 solid/solid/backends/wmi/wmivolume.cpp  |    2 +-
 4 files changed, 30 insertions(+), 78 deletions(-)

diff --git a/solid/solid/backends/wmi/wmibattery.cpp b/solid/solid/backends/wmi/wmibattery.cpp
index 002eb54..02c1fe0 100644
--- a/solid/solid/backends/wmi/wmibattery.cpp
+++ b/solid/solid/backends/wmi/wmibattery.cpp
@@ -1,4 +1,5 @@
 /*
+    Copyright 2012 Patrick von Reth <vonreth@kde.org>
     Copyright 2006 Kevin Ottens <ervin@kde.org>
 
     This library is free software; you can redistribute it and/or
@@ -25,8 +26,8 @@ using namespace Solid::Backends::Wmi;
 Battery::Battery(WmiDevice *device)
     : DeviceInterface(device)
 {
-    connect(device, SIGNAL(propertyChanged(QMap<QString,int>)),
-             this, SLOT(slotPropertyChanged(QMap<QString,int>)));
+//     connect(device, SIGNAL(propertyChanged(QMap<QString,int>)),
+//              this, SLOT(slotPropertyChanged(QMap<QString,int>)));
 }
 
 Battery::~Battery()
@@ -37,61 +38,30 @@ Battery::~Battery()
 
 bool Battery::isPlugged() const
 {
-    return m_device->property("battery.present").toBool();
+    return true;
 }
 
 Solid::Battery::BatteryType Battery::type() const
 {
-    QString name = m_device->property("battery.type").toString();
-
-    if (name == "pda")
-    {
-        return Solid::Battery::PdaBattery;
-    }
-    else if (name == "ups")
-    {
-        return Solid::Battery::UpsBattery;
-    }
-    else if (name == "primary")
-    {
+    //as far as i know peripheral bateries are not listed
         return Solid::Battery::PrimaryBattery;
-    }
-    else if (name == "mouse")
-    {
-        return Solid::Battery::MouseBattery;
-    }
-    else if (name == "keyboard")
-    {
-        return Solid::Battery::KeyboardBattery;
-    }
-    else if (name == "keyboard_mouse")
-    {
-        return Solid::Battery::KeyboardMouseBattery;
-    }
-    else if (name == "camera")
-    {
-        return Solid::Battery::CameraBattery;
-    }
-    else
-    {
-        return Solid::Battery::UnknownBattery;
-    }
 }
 
 int Battery::chargePercent() const
 {
-    return m_device->property("battery.charge_level.percentage").toInt();
+    return m_device->property("EstimatedChargeRemaining").toInt();
 }
 
 bool Battery::isRechargeable() const
 {
-    return m_device->property("battery.is_rechargeable").toBool();
+    return true;
 }
 
 Solid::Battery::ChargeState Battery::chargeState() const
 {
-    bool charging = m_device->property("battery.rechargeable.is_charging").toBool();
-    bool discharging = m_device->property("battery.rechargeable.is_discharging").toBool();
+    short status =  m_device->property("BatteryStatus").toInt();
+    bool charging = status == 2 || status >= 6 && status <=8;//2 = The system has access to AC so no battery is being discharged. However, the battery is not necessarily charging , but windows mostlikly wont tell anything else then 2 or 1
+    bool discharging = status == 1 || status >=3 && status <=5 || status == 11;
 
     if (!charging && !discharging)
     {
@@ -109,19 +79,19 @@ Solid::Battery::ChargeState Battery::chargeState() const
 
 void Battery::slotPropertyChanged(const QMap<QString,int> &changes)
 {
-    if (changes.contains("battery.charge_level.percentage"))
-    {
-        emit chargePercentChanged(chargePercent(), m_device->udi());
-    }
-    else if (changes.contains("battery.rechargeable.is_charging")
-           || changes.contains("battery.rechargeable.is_discharging"))
-    {
-        emit chargeStateChanged(chargeState(), m_device->udi());
-    }
-    else if ( changes.contains( "battery.present" ) )
-    {
-        emit plugStateChanged(isPlugged(), m_device->udi());
-    }
+//     if (changes.contains("battery.charge_level.percentage"))
+//     {
+//         emit chargePercentChanged(chargePercent(), m_device->udi());
+//     }
+//     else if (changes.contains("battery.rechargeable.is_charging")
+//            || changes.contains("battery.rechargeable.is_discharging"))
+//     {
+//         emit chargeStateChanged(chargeState(), m_device->udi());
+//     }
+//     else if ( changes.contains( "battery.present" ) )
+//     {
+//         emit plugStateChanged(isPlugged(), m_device->udi());
+//     }
 
 }
 
diff --git a/solid/solid/backends/wmi/wmibattery.h b/solid/solid/backends/wmi/wmibattery.h
index 68fd7f5..50aa5e5 100644
--- a/solid/solid/backends/wmi/wmibattery.h
+++ b/solid/solid/backends/wmi/wmibattery.h
@@ -1,4 +1,5 @@
 /*
+    Copyright 2012 Patrick von Reth <vonreth@kde.org>
     Copyright 2006 Kevin Ottens <ervin@kde.org>
 
     This library is free software; you can redistribute it and/or
diff --git a/solid/solid/backends/wmi/wmidevice.cpp b/solid/solid/backends/wmi/wmidevice.cpp
index 2df44af..0363fe3 100644
--- a/solid/solid/backends/wmi/wmidevice.cpp
+++ b/solid/solid/backends/wmi/wmidevice.cpp
@@ -263,15 +263,6 @@ public:
         case Solid::DeviceInterface::OpticalDisc:
             propertyName = "Drive";
             break;
-        case Solid::DeviceInterface::Battery:
-            propertyName = "Name";
-            break;
-        case Solid::DeviceInterface::StorageAccess:
-             propertyName = "DeviceID";
-             break;
-        case Solid::DeviceInterface::StorageVolume:
-            propertyName = "DeviceID";
-            break;
         case Solid::DeviceInterface::StorageDrive:
             propertyName = "Index";
             break;
@@ -386,7 +377,7 @@ QString WmiDevice::vendor() const
         propertyName = "Caption";
         break;
     case Solid::DeviceInterface::Battery:
-        propertyName = "Name";//TODO:
+        propertyName = "DeviceID";
         break;
     case Solid::DeviceInterface::StorageAccess:
     case Solid::DeviceInterface::StorageVolume:
@@ -411,15 +402,6 @@ QString WmiDevice::product() const
     case Solid::DeviceInterface::Processor:
         propertyName = "Name";
         break;
-    case Solid::DeviceInterface::OpticalDrive:
-        propertyName = "Caption";
-        break;
-    case Solid::DeviceInterface::OpticalDisc:
-        propertyName = "Caption";
-        break;
-    case Solid::DeviceInterface::Battery:
-        propertyName = "Name";//TODO:
-        break;
     case Solid::DeviceInterface::StorageAccess:
     case Solid::DeviceInterface::StorageVolume:
     {
@@ -427,11 +409,8 @@ QString WmiDevice::product() const
         return item.getProperty("VolumeName").toString();
     }
         break;
-    case Solid::DeviceInterface::StorageDrive:
-        propertyName = "Caption";
-        break;
     default:
-        propertyName = "DeviceID";//TODO:
+        propertyName = "Caption";
     }
     return property(propertyName).toString();
 }
@@ -481,7 +460,9 @@ QString WmiDevice::description() const
 {
     switch(type()){
         case Solid::DeviceInterface::OpticalDisc:
-        return property("VolumeName").toString();
+            return property("VolumeName").toString();
+        case Solid::DeviceInterface::Battery:
+            return property("Description").toString();
     }
 
     return product(); // TODO
diff --git a/solid/solid/backends/wmi/wmivolume.cpp b/solid/solid/backends/wmi/wmivolume.cpp
index 48db6a6..d962e70 100644
--- a/solid/solid/backends/wmi/wmivolume.cpp
+++ b/solid/solid/backends/wmi/wmivolume.cpp
@@ -73,7 +73,7 @@ qulonglong Volume::size() const
 
 QString Solid::Backends::Wmi::Volume::encryptedContainerUdi() const
 {
-    return m_device->property("volume.crypto_luks.clear.backing_volume").toString();
+    return this->uuid();
 }
 
 #include "backends/wmi/wmivolume.moc"
-- 
1.7.4.msysgit.0

