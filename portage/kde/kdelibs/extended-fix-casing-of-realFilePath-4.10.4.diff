diff -Nru -x '*~' kdelibs-4.10.4.orig/kdecore/config/kconfig.cpp kdelibs-4.10.4/kdecore/config/kconfig.cpp
--- kdelibs-4.10.4.orig/kdecore/config/kconfig.cpp	2013-05-28 20:33:13.000000000 +0200
+++ kdelibs-4.10.4/kdecore/config/kconfig.cpp	2013-06-13 01:00:20.913488000 +0200
@@ -560,7 +560,11 @@
         return;
     }
 
+#ifndef Q_OS_WIN
     bSuppressGlobal = (file == sGlobalFileName);
+#else
+    bSuppressGlobal = (file.compare(sGlobalFileName, Qt::CaseInsensitive) == 0);
+#endif
 
     if (bDynamicBackend || !mBackend) // allow dynamic changing of backend
         mBackend = KConfigBackend::create(componentData, file);
@@ -616,7 +620,11 @@
     const QByteArray utf8Locale = locale.toUtf8();
     foreach(const QString& file, globalFiles) {
         KConfigBackend::ParseOptions parseOpts = KConfigBackend::ParseGlobal|KConfigBackend::ParseExpansions;
+#ifndef Q_OS_WIN
         if (file != sGlobalFileName)
+#else
+        if (file.compare(sGlobalFileName, Qt::CaseInsensitive) != 0)
+#endif
             parseOpts |= KConfigBackend::ParseDefaults;
 
         KSharedPtr<KConfigBackend> backend = KConfigBackend::create(componentData, file);
@@ -651,7 +659,11 @@
 
         const QByteArray utf8Locale = locale.toUtf8();
         foreach(const QString& file, files) {
+#ifndef Q_OS_WIN
             if (file == mBackend->filePath()) {
+#else
+            if (file.compare(mBackend->filePath(), Qt::CaseInsensitive) == 0) {
+#endif
                 switch (mBackend->parseConfig(utf8Locale, entryMap, KConfigBackend::ParseExpansions)) {
                 case KConfigBackend::ParseOk:
                     break;
diff -Nru -x '*~' kdelibs-4.10.4.orig/kdecore/config/kdesktopfile.cpp kdelibs-4.10.4/kdecore/config/kdesktopfile.cpp
--- kdelibs-4.10.4.orig/kdecore/config/kdesktopfile.cpp	2013-05-28 20:33:13.000000000 +0200
+++ kdelibs-4.10.4/kdecore/config/kdesktopfile.cpp	2013-06-13 01:00:20.919488400 +0200
@@ -153,7 +153,11 @@
 
   // Check if the .desktop file is installed as part of KDE or XDG.
   foreach (const QString &prefix, kdePrefixes) {
+#ifndef Q_OS_WIN
     if (realPath.startsWith(prefix))
+#else
+    if (realPath.startsWith(prefix, Qt::CaseInsensitive))
+#endif
       return true;
   }
 
diff -Nru -x '*~' kdelibs-4.10.4.orig/kdecore/io/kmountpoint.cpp kdelibs-4.10.4/kdecore/io/kmountpoint.cpp
--- kdelibs-4.10.4.orig/kdecore/io/kmountpoint.cpp	2013-05-28 20:33:13.000000000 +0200
+++ kdelibs-4.10.4/kdecore/io/kmountpoint.cpp	2013-06-13 01:26:35.191531600 +0200
@@ -33,6 +33,12 @@
 #include <QDir>
 #endif
 
+#ifdef Q_OS_WIN
+static Qt::CaseSensitivity cs = Qt::CaseInsensitive;
+#else
+static Qt::CaseSensitivity cs = Qt::CaseSensitive;
+#endif
+
 #ifdef HAVE_VOLMGT
 #include <volmgt.h>
 #endif
@@ -478,8 +484,7 @@
 static bool pathsAreParentAndChildOrEqual(const QString& parent, const QString& child)
 {
     const QLatin1Char slash('/');
-
-    if (child.startsWith(parent)) {
+    if (child.startsWith(parent, cs)) {
         // Check if either
         // (a) both paths are equal, or
         // (b) parent ends with '/', or
@@ -487,10 +492,10 @@
         //     Note that child is guaranteed to be longer than parent if (a) is false.
         //
         // This prevents that we incorrectly consider "/books" a child of "/book".
-        return parent == child || parent.endsWith(slash) || child.at(parent.length()) == slash;
+        return parent.compare(child, cs) || parent.endsWith(slash) || child.at(parent.length()) == slash;
     } else {
         // Note that "/books" is a child of "/books/".
-        return parent.endsWith(slash) && (parent.length() == child.length() + 1) && parent.startsWith(child);
+        return parent.endsWith(slash) && (parent.length() == child.length() + 1) && parent.startsWith(child, cs);
     }
 }
 
@@ -523,8 +528,8 @@
     if (realDevice.isEmpty()) // d->device can be empty in the loop below, don't match empty with it
         return Ptr();
     for (const_iterator it = begin(); it != end(); ++it) {
-        if ((*it)->d->device == realDevice ||
-            (*it)->d->mountedFrom == realDevice)
+        if (realDevice.compare((*it)->d->device, cs) == 0 ||
+            realDevice.compare((*it)->d->mountedFrom, cs) == 0)
             return *it;
     }
     return Ptr();
diff -Nru -x '*~' kdelibs-4.10.4.orig/kdecore/kernel/kstandarddirs.cpp kdelibs-4.10.4/kdecore/kernel/kstandarddirs.cpp
--- kdelibs-4.10.4.orig/kdecore/kernel/kstandarddirs.cpp	2013-06-13 01:40:34.644545600 +0200
+++ kdelibs-4.10.4/kdecore/kernel/kstandarddirs.cpp	2013-06-13 01:35:31.023179400 +0200
@@ -74,6 +74,13 @@
 #include <QtCore/QSettings>
 #include <QtCore/QProcessEnvironment>
 
+#ifdef Q_OS_WIN
+static Qt::CaseSensitivity cs = Qt::CaseInsensitive;
+#else
+static Qt::CaseSensitivity cs = Qt::CaseSensitive;
+#endif
+
+
 class KStandardDirs::KStandardDirsPrivate
 {
 public:
@@ -325,7 +332,7 @@
     if (dir.at(dir.length() - 1) != QLatin1Char('/'))
         dir += QLatin1Char('/');
 
-    if (!d->m_prefixes.contains(dir)) {
+    if (!d->m_prefixes.contains(dir, cs)) {
         priorityAdd(d->m_prefixes, dir, priority);
         d->m_dircache.clear();
     }
@@ -345,7 +352,7 @@
     if (dir.at(dir.length() - 1) != QLatin1Char('/'))
         dir += QLatin1Char('/');
 
-    if (!d->xdgconf_prefixes.contains(dir)) {
+    if (!d->xdgconf_prefixes.contains(dir, cs)) {
         priorityAdd(d->xdgconf_prefixes, dir, priority);
         d->m_dircache.clear();
     }
@@ -365,7 +372,7 @@
     if (dir.at(dir.length() - 1) != QLatin1Char('/'))
         dir += QLatin1Char('/');
 
-    if (!d->xdgdata_prefixes.contains(dir)) {
+    if (!d->xdgdata_prefixes.contains(dir, cs)) {
         priorityAdd(d->xdgdata_prefixes, dir, priority);
         d->m_dircache.clear();
     }
@@ -413,7 +420,7 @@
     QByteArray typeBa = type;
     QStringList& rels = d->m_relatives[typeBa]; // find or insert
 
-    if (!rels.contains(copy)) {
+    if (!rels.contains(copy, cs)) {
         if (priority)
             rels.prepend(copy);
         else
@@ -439,7 +446,7 @@
 
     QByteArray typeBa = type;
     QStringList &paths = d->m_absolutes[typeBa];
-    if (!paths.contains(copy)) {
+    if (!paths.contains(copy, cs)) {
         if (priority)
             paths.prepend(copy);
         else
@@ -472,7 +479,7 @@
     QString filename(_filename);
 #ifdef Q_OS_WIN
     if(strcmp(type, "exe") == 0) {
-      if(!filename.endsWith(QLatin1String(".exe")))
+      if(!filename.endsWith(QLatin1String(".exe"), Qt::CaseInsensitive))
         filename += QLatin1String(".exe");
     }
 #endif
@@ -560,7 +567,7 @@
     QString filename(_filename);
 #ifdef Q_OS_WIN
     if(strcmp(type, "exe") == 0) {
-      if(!filename.endsWith(QLatin1String(".exe")))
+      if(!filename.endsWith(QLatin1String(".exe"), Qt::CaseInsensitive))
         filename += QLatin1String(".exe");
     }
 #endif
@@ -646,7 +653,7 @@
                 }
                 if ( !bIsDir )
                 {
-                    if ( !unique || !relList.contains(relPart + fn) )
+                    if ( !unique || !relList.contains(relPart + fn, cs) )
                     {
                         list.append( pathfn );
                         relList.append( relPart + fn );
@@ -703,7 +710,7 @@
             }
             if ( isReg )
             {
-                if (!unique || !relList.contains(relPart + fn))
+                if (!unique || !relList.contains(relPart + fn, cs))
                 {
                     list.append( pathfn );
                     relList.append( relPart + fn );
@@ -723,7 +730,7 @@
             return; // File not found
         if ( S_ISREG( buff.st_mode))
         {
-            if (!unique || !relList.contains(relPart + fn))
+            if (!unique || !relList.contains(relPart + fn, cs))
             {
                 list.append( pathfn );
                 relList.append( relPart + fn );
@@ -1107,14 +1114,8 @@
 
         const QStringList dirs = m_relatives.value(type);
         const QString typeInstallPath = installPath(type); // could be empty
-// better #ifdef incasesensitive_filesystem
-#ifdef Q_WS_WIN
-        const QString installdir = typeInstallPath.isEmpty() ? QString() : realPath(typeInstallPath).toLower();
-        const QString installprefix = installPath("kdedir").toLower();
-#else
         const QString installdir = typeInstallPath.isEmpty() ? QString() : realPath(typeInstallPath);
         const QString installprefix = installPath("kdedir");
-#endif
         if (!dirs.isEmpty())
         {
             bool local = true;
@@ -1131,13 +1132,9 @@
                     for (QStringList::ConstIterator it2 = basedirs.begin();
                          it2 != basedirs.end(); ++it2)
                     {
-#ifdef Q_WS_WIN
-                        const QString path = realPath( *it2 + rest ).toLower();
-#else
                         const QString path = realPath( *it2 + rest );
-#endif
                         testdir.setPath(path);
-                        if ((local || testdir.exists()) && !candidates.contains(path))
+                        if ((local || testdir.exists()) && !candidates.contains(path, cs))
                             candidates.append(path);
                         local = false;
                     }
@@ -1156,22 +1153,18 @@
                  pit != prefixList->end();
                  ++pit)
             {
-            if((*pit)!=installprefix||installdir.isEmpty())
+            if((*pit).compare(installprefix, cs)!=0||installdir.isEmpty())
             {
                     for (QStringList::ConstIterator it = dirs.constBegin();
                          it != dirs.constEnd(); ++it)
                     {
                         if ((*it).startsWith(QLatin1Char('%')))
                             continue;
-#ifdef Q_WS_WIN
-                        const QString path = realPath( *pit + *it ).toLower();
-#else
                         const QString path = realPath( *pit + *it );
-#endif
                         testdir.setPath(path);
                         if (local && restrictionActive)
                             continue;
-                        if ((local || testdir.exists()) && !candidates.contains(path))
+                        if ((local || testdir.exists()) && !candidates.contains(path, cs))
                             candidates.append(path);
                     }
                     local = false;
@@ -1180,7 +1173,7 @@
             {
                     // we have a custom install path, so use this instead of <installprefix>/<relative dir>
                 testdir.setPath(installdir);
-                    if(testdir.exists() && ! candidates.contains(installdir))
+                    if(testdir.exists() && ! candidates.contains(installdir, cs))
                         candidates.append(installdir);
             }
         }
@@ -1190,7 +1183,7 @@
         if (!installdir.isEmpty()) {
             bool ok = true;
             foreach (const QString &s, candidates) {
-                if (installdir.startsWith(s)) {
+                if (installdir.startsWith(s, cs)) {
                     ok = false;
                     break;
                 }
@@ -1205,12 +1198,8 @@
         {
             testdir.setPath(*it);
             if (testdir.exists()) {
-#ifdef Q_WS_WIN
-                const QString filename = realPath( *it ).toLower();
-#else
                 const QString filename = realPath( *it );
-#endif
-                if (!candidates.contains(filename)) {
+                if (!candidates.contains(filename, cs)) {
                     candidates.append(filename);
                 }
             }
@@ -1482,7 +1471,7 @@
     Q_FOREACH(const QString& var, envVars.keys())
     {
         const QString varName = QLatin1Char('%') + var + QLatin1Char('%');
-        if(str.contains(varName))
+        if(str.contains(varName, Qt::CaseInsensitive))
         {
             ret.replace(varName, envVars[var], Qt::CaseInsensitive);
         }
@@ -1601,7 +1590,7 @@
 
     for (QStringList::ConstIterator it = candidates.begin();
          it != candidates.end(); ++it) {
-        if (fullPath.startsWith(*it)) {
+        if (fullPath.startsWith(*it, cs)) {
             return fullPath.mid((*it).length());
         }
     }
@@ -1735,7 +1724,7 @@
     kdedirList.append(installPath("kdedir"));
 
     QString execPrefix(QFile::decodeName(EXEC_INSTALL_PREFIX));
-    if (!execPrefix.isEmpty() && !kdedirList.contains(execPrefix))
+    if (!execPrefix.isEmpty() && !kdedirList.contains(execPrefix, cs))
         kdedirList.append(execPrefix);
 #ifdef __linux__
     const QString linuxExecPrefix = executablePrefix();
@@ -1876,7 +1865,7 @@
         // otherwise resourceDirs() will add kdedir/share/applications/kde4
         // as returned by installPath(), and that's incorrect.
         Q_FOREACH(const QString& dir, kdedirDataDirs) {
-            if (!xdgdirList.contains(dir))
+            if (!xdgdirList.contains(dir, cs))
                 xdgdirList.append(dir);
         }
     } else {
diff -Nru -x '*~' kdelibs-4.10.4.orig/kded/vfolder_menu.cpp kdelibs-4.10.4/kded/vfolder_menu.cpp
--- kdelibs-4.10.4.orig/kded/vfolder_menu.cpp	2013-05-28 20:33:13.000000000 +0200
+++ kdelibs-4.10.4/kded/vfolder_menu.cpp	2013-06-13 01:00:20.957490600 +0200
@@ -95,7 +95,11 @@
    QString previous = *it++;
    for(;it != m_allDirectories.end();)
    {
+#ifndef Q_OS_WIN
      if ((*it).startsWith(previous))
+#else
+     if ((*it).startsWith(previous, Qt::CaseInsensitive))
+#endif
      {
         it = m_allDirectories.erase(it);
      }
@@ -1268,7 +1272,11 @@
 
             QString prefix = e.attributes().namedItem("prefix").toAttr().value();
 
+#ifndef Q_OS_WIN
             if (m_defaultLegacyDirs.contains(dir))
+#else
+            if (m_defaultLegacyDirs.contains(dir, Qt::CaseInsensitive))
+#endif
             {
                if (!kdeLegacyDirsDone)
                {
diff -Nru -x '*~' kdelibs-4.10.4.orig/kdeui/actions/krecentfilesaction.cpp kdelibs-4.10.4/kdeui/actions/krecentfilesaction.cpp
--- kdelibs-4.10.4.orig/kdeui/actions/krecentfilesaction.cpp	2013-05-28 20:33:13.000000000 +0200
+++ kdelibs-4.10.4/kdeui/actions/krecentfilesaction.cpp	2013-06-13 01:37:54.080361800 +0200
@@ -171,7 +171,7 @@
     {
 #ifdef Q_OS_WIN
       const QString tmpFileName = url.isLocalFile() ? QDir::toNativeSeparators( d->m_urls[action].pathOrUrl() ) : d->m_urls[action].pathOrUrl();
-      if ( tmpFileName.endsWith(file) )
+      if ( tmpFileName.endsWith(file, Qt::CaseInsensitive) )
 #else
       if ( d->m_urls[action].pathOrUrl().endsWith(file) )
 #endif
