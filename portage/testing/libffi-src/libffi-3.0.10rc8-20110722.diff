diff -Nru libffi-3.0.10rc8.orig/CMakeLists.txt libffi-3.0.10rc8/CMakeLists.txt
--- libffi-3.0.10rc8.orig/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ libffi-3.0.10rc8/CMakeLists.txt	2011-07-22 21:10:45.358944800 +0200
@@ -0,0 +1,69 @@
+project(libffi)
+
+cmake_minimum_required(VERSION 2.8)
+
+ENABLE_LANGUAGE(ASM_MASM)
+
+string(TOLOWER _buildtype ${CMAKE_BUILD_TYPE})
+set(VERSION "3.0.10rc8")
+set(TARGET X86_WIN32)
+set(HAVE_LONG_DOUBLE 0)
+set(HAVE_ALLOCA 1)
+set(HAVE_AS_X86_PCREL 1)
+set(HAVE_MEMCPY 1)
+set(HAVE_MEMORY_H 1)
+set(HAVE_STDINT_H 1)
+set(HAVE_STDLIB_H 1)
+set(HAVE_STRING_H 1)
+set(HAVE_SYS_STAT_H 1)
+set(HAVE_SYS_TYPES_H 1)
+set(LT_OBJDIR ".libs/")
+set(PACKAGE "libffi")
+set(PACKAGE_BUGREPORT "http://sourceware.org/libffi.html")
+set(PACKAGE_NAME "libffi")
+set(PACKAGE_STRING "libffi 3.0.10rc8")
+set(PACKAGE_TARNAME "libffi")
+set(PACKAGE_URL "")
+set(PACKAGE_VERSION "3.0.10rc8")
+set(SIZEOF_DOUBLE 8)
+set(SIZEOF_LONG_DOUBLE 8)
+set(STDC_HEADERS 1)
+
+
+set(ffi_SRCS
+    src/prep_cif.c
+    src/types.c
+    src/raw_api.c
+    src/java_raw_api.c
+    src/closures.c
+
+    src/x86/ffi.c
+    ${CMAKE_BINARY_DIR}/win32.asm
+)
+
+message(STATUS "${_buildtype}")
+
+if(${_buildtype} MATCHES "debug")
+    add_definitions(-DFFI_DEBUG)
+    set(ffi_SRCS ${ffi_SRCS} src/debug.c)
+endif(${_buildtype} MATCHES "debug")
+
+include_directories(include ${CMAKE_BINARY_DIR} src/x86)
+
+configure_file(src/x86/ffitarget.h ${CMAKE_BINARY_DIR}/ffitarget.h COPYONLY)
+configure_file(fficonfig.h.cmake ${CMAKE_BINARY_DIR}/fficonfig.h)
+configure_file(include/ffi.h.in ${CMAKE_BINARY_DIR}/ffi.h @ONLY)
+
+if(MSVC)
+    add_custom_command(    OUTPUT ${CMAKE_BINARY_DIR}/win32.asm 
+                        COMMAND cl /EP /I${CMAKE_BINARY_DIR} /I${CMAKE_SOURCE_DIR}/src/x86 ${CMAKE_SOURCE_DIR}/src/x86/win32.S > ${CMAKE_BINARY_DIR}/win32.asm)
+else(MSVC)
+    message(FATAL_ERROR "not implemented yet")
+endif(MSVC)
+add_library(libffi ${ffi_SRCS})
+
+install(TARGETS libffi RUNTIME DESTINATION bin
+                    LIBRARY DESTINATION lib
+                    ARCHIVE DESTINATION lib)
+
+install(FILES ${CMAKE_BINARY_DIR}/ffi.h ${CMAKE_BINARY_DIR}/ffitarget.h DESTINATION include)
\ No newline at end of file
diff -Nru libffi-3.0.10rc8.orig/fficonfig.h.cmake libffi-3.0.10rc8/fficonfig.h.cmake
--- libffi-3.0.10rc8.orig/fficonfig.h.cmake	1970-01-01 01:00:00.000000000 +0100
+++ libffi-3.0.10rc8/fficonfig.h.cmake	2011-07-22 20:52:11.434232000 +0200
@@ -0,0 +1,202 @@
+/* fficonfig.h.in.  Generated from configure.ac by autoheader.  */
+
+/* Define if building universal (internal helper macro) */
+#cmakedefine AC_APPLE_UNIVERSAL_BUILD @AC_APPLE_UNIVERSAL_BUILD@
+
+/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP
+   systems. This function is required for `alloca.c' support on those systems.
+   */
+#cmakedefine CRAY_STACKSEG_END @CRAY_STACKSEG_END@
+
+/* Define to 1 if using `alloca.c'. */
+#cmakedefine C_ALLOCA @C_ALLOCA@ @C_ALLOCA @C_ALLOCA@@
+
+/* Define to the flags needed for the .section .eh_frame directive. */
+#cmakedefine EH_FRAME_FLAGS @EH_FRAME_FLAGS@
+
+/* Define this if you want extra debugging. */
+#cmakedefine FFI_DEBUG @FFI_DEBUG@
+
+/* Cannot use PROT_EXEC on this target, so, we revert to alternative means */
+#cmakedefine FFI_EXEC_TRAMPOLINE_TABLE @FFI_EXEC_TRAMPOLINE_TABLE@
+
+/* Cannot use malloc on this target, so, we revert to alternative means */
+#cmakedefine FFI_MMAP_EXEC_WRIT @FFI_MMAP_EXEC_WRIT@
+
+/* Define this is you do not want support for the raw API. */
+#cmakedefine FFI_NO_RAW_API @FFI_NO_RAW_API@
+
+/* Define this is you do not want support for aggregate types. */
+#cmakedefine FFI_NO_STRUCTS @FFI_NO_STRUCTS@
+
+/* Define to 1 if you have `alloca', as a function or macro. */
+#cmakedefine HAVE_ALLOCA @HAVE_ALLOCA@
+
+/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).
+   */
+#cmakedefine HAVE_ALLOCA_H @HAVE_ALLOCA_H@
+
+/* Define if your assembler supports .ascii. */
+#cmakedefine HAVE_AS_ASCII_PSEUDO_OP @HAVE_AS_ASCII_PSEUDO_OP@
+
+/* Define if your assembler supports .cfi_* directives. */
+#cmakedefine HAVE_AS_CFI_PSEUDO_OP @HAVE_AS_CFI_PSEUDO_OP@
+
+/* Define if your assembler supports .register. */
+#cmakedefine HAVE_AS_REGISTER_PSEUDO_OP @HAVE_AS_REGISTER_PSEUDO_OP@
+
+/* Define if your assembler and linker support unaligned PC relative relocs.
+   */
+#cmakedefine HAVE_AS_SPARC_UA_PCREL @HAVE_AS_SPARC_UA_PCREL@
+
+/* Define if your assembler supports .string. */
+#cmakedefine HAVE_AS_STRING_PSEUDO_OP @HAVE_AS_STRING_PSEUDO_OP@
+
+/* Define if your assembler supports unwind section type. */
+#cmakedefine HAVE_AS_X86_64_UNWIND_SECTION_TYPE @HAVE_AS_X86_64_UNWIND_SECTION_TYPE@
+
+/* Define if your assembler supports PC relative relocs. */
+#cmakedefine HAVE_AS_X86_PCREL @HAVE_AS_X86_PCREL@
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H @HAVE_DLFCN_H@
+
+/* Define if __attribute__((visibility("hidden"))) is supported. */
+#cmakedefine HAVE_HIDDEN_VISIBILITY_ATTRIBUTE @HAVE_HIDDEN_VISIBILITY_ATTRIBUTE@
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H @HAVE_INTTYPES_H@
+
+/* Define if you have the long double type and it is bigger than a double */
+#cmakedefine HAVE_LONG_DOUBLE @HAVE_LONG_DOUBLE@
+
+/* Define to 1 if you have the `memcpy' function. */
+#cmakedefine HAVE_MEMCPY @HAVE_MEMCPY@
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H @HAVE_MEMORY_H@
+
+/* Define to 1 if you have the `mmap' function. */
+#cmakedefine HAVE_MMAP @HAVE_MMAP@
+
+/* Define if mmap with MAP_ANON(YMOUS) works. */
+#cmakedefine HAVE_MMAP_ANON @HAVE_MMAP_ANON@
+
+/* Define if mmap of /dev/zero works. */
+#cmakedefine HAVE_MMAP_DEV_ZERO @HAVE_MMAP_DEV_ZERO@
+
+/* Define if read-only mmap of a plain file works. */
+#cmakedefine HAVE_MMAP_FILE @HAVE_MMAP_FILE@
+
+/* Define if .eh_frame sections should be read-only. */
+#cmakedefine HAVE_RO_EH_FRAME @HAVE_RO_EH_FRAME@
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H @HAVE_STDINT_H@
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H @HAVE_STDLIB_H@
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H @HAVE_STRINGS_H@
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H @HAVE_STRING_H@
+
+/* Define to 1 if you have the <sys/mman.h> header file. */
+#cmakedefine HAVE_SYS_MMAN_H @HAVE_SYS_MMAN_H@
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H @HAVE_SYS_STAT_H@
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H @HAVE_SYS_TYPES_H@
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H @HAVE_UNISTD_H@
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#cmakedefine LT_OBJDIR @LT_OBJDIR@
+
+/* Define to 1 if your C compiler doesn't accept -c and -o together. */
+#cmakedefine NO_MINUS_C_MINUS_O @NO_MINUS_C_MINUS_O@
+
+/* Name of package */
+#cmakedefine PACKAGE @PACKAGE@
+
+/* Define to the address where bug reports for this package should be sent. */
+#cmakedefine PACKAGE_BUGREPORT @PACKAGE_BUGREPORT@
+
+/* Define to the full name of this package. */
+#cmakedefine PACKAGE_NAME @PACKAGE_NAME@
+
+/* Define to the full name and version of this package. */
+#cmakedefine PACKAGE_STRING @PACKAGE_STRING@
+
+/* Define to the one symbol short name of this package. */
+#cmakedefine PACKAGE_TARNAME @PACKAGE_TARNAME@
+
+/* Define to the home page for this package. */
+#cmakedefine PACKAGE_URL @PACKAGE_URL@
+
+/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION @PACKAGE_VERSION@
+
+/* The size of `double', as computed by sizeof. */
+#cmakedefine SIZEOF_DOUBLE @SIZEOF_DOUBLE@
+
+/* The size of `long double', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG_DOUBLE @SIZEOF_LONG_DOUBLE@
+
+/* If using the C implementation of alloca, define if you know the
+   direction of stack growth for your system; otherwise it will be
+   automatically deduced at runtime.
+	STACK_DIRECTION > 0 => grows toward higher addresses
+	STACK_DIRECTION < 0 => grows toward lower addresses
+	STACK_DIRECTION = 0 => direction of growth unknown */
+#cmakedefine STACK_DIRECTION @STACK_DIRECTION@
+
+/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS @STDC_HEADERS@
+
+/* Define if symbols are underscored. */
+#cmakedefine SYMBOL_UNDERSCORE @SYMBOL_UNDERSCORE@
+
+/* Define this if you are using Purify and want to suppress spurious messages.
+   */
+#cmakedefine USING_PURIFY @USING_PURIFY@
+
+/* Version number of package */
+#cmakedefine VERSION @VERSION@
+
+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+   significant byte first (like Motorola and SPARC, unlike Intel). */
+#if defined AC_APPLE_UNIVERSAL_BUILD
+# if defined __BIG_ENDIAN__
+#  define WORDS_BIGENDIAN 1
+# endif
+#else
+# ifndef WORDS_BIGENDIAN
+#cmakedefine WORDS_BIGENDIAN @WORDS_BIGENDIAN@
+# endif
+#endif
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+#cmakedefine size_t @size_t@
+
+
+#ifdef HAVE_HIDDEN_VISIBILITY_ATTRIBUTE
+#ifdef LIBFFI_ASM
+#define FFI_HIDDEN(name) .hidden name
+#else
+#define FFI_HIDDEN __attribute__ ((visibility ("hidden")))
+#endif
+#else
+#ifdef LIBFFI_ASM
+#define FFI_HIDDEN(name)
+#else
+#define FFI_HIDDEN
+#endif
+#endif
+
